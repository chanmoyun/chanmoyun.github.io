<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>禅墨云</title>
  
  
  <link href="https://chanmoyun.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://chanmoyun.gitee.io/"/>
  <updated>2024-01-09T03:09:57.273Z</updated>
  <id>https://chanmoyun.gitee.io/</id>
  
  <author>
    <name>Chanmo Jia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实时人脸识别</title>
    <link href="https://chanmoyun.gitee.io/2022/04/12/Opencv-pro/%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    <id>https://chanmoyun.gitee.io/2022/04/12/Opencv-pro/%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</id>
    <published>2022-04-11T16:00:00.000Z</published>
    <updated>2024-01-09T03:09:57.273Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="实时人脸识别"><a href="#实时人脸识别" class="headerlink" title="实时人脸识别"></a>实时人脸识别</h1><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>你好，我是禅墨！好久，不见！</p>    <div id="aplayer-TKPgwQlA" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1901371647" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>补上一个之前写好但是在文件夹吃灰的文章，实施人脸识别，需要简单的数据训练！</p><p><strong>代码编写有三个步骤：</strong></p><p>Step1：采集人脸数据和人脸检测</p><p>Step2：训练人脸识别模型</p><p>Step3：人脸识别推理</p><p><img src="https://img-blog.csdnimg.cn/d6ec47fe7d0a484281ed6de6c0798640.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56aF5aKo5LqR,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h3><p>​    本文采用需要Python + Opencv + Opencv-contrib的组合，完成后可移植在Linux系统</p><ol><li><p>安装Python3.7</p><p>官网：<a href="https://www.python.org/downloads/%EF%BC%8C%E6%8E%A8%E8%8D%90%E7%89%88%E6%9C%AC3.7%EF%BC%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E9%80%82%E9%85%8D%E5%A4%9A%EF%BC%8C%E6%AF%94%E8%BE%83%E5%85%A8%E9%9D%A2">https://www.python.org/downloads/，推荐版本3.7，第三方库适配多，比较全面</a></p><p>安装后需要加入系统环境</p></li><li><p>安装pycharm，此类教程较多，不做过多赘述，社区版足够了</p><p>官网：<a href="">https://www.jetbrains.com/pycharm/</a></p></li><li><p>按照要求安装后需要安装第三方库：opencv-python，采用4.2.0、Opencv-contrib，采用4.5.2</p><p>注意版本，否则会造成版本不匹配出现运行问题</p></li></ol><h3 id="二、调用相机"><a href="#二、调用相机" class="headerlink" title="二、调用相机"></a>二、调用相机</h3><p>接下来就测试一下确认相机是否工作正常。在 IDE 上输入以下 Python 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>) <span class="comment">#0表示调用默认相机、1表示调用usb相机</span></span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">3</span>,<span class="number">640</span>) <span class="comment">#宽度</span></span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">4</span>,<span class="number">480</span>) <span class="comment">#高度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    ret,frame = cap.read()</span><br><span class="line">    frame = cv2.flip(frame,<span class="number">1</span>)</span><br><span class="line">    gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;frame&#x27;</span>,frame)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;gray&#x27;</span>,gray)</span><br><span class="line">    k = cv2.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:            <span class="comment">#esc退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows() <span class="comment">#释放所用窗口</span></span><br></pre></td></tr></table></figure><p>这段代码可以调用默认Cam，捕获视频流，并且通过黑白模式和RGB模式显示出来。按下Esc即可退出程序。</p><p><img src="https://img-blog.csdnimg.cn/630dc69fa7ff4437afe1cafa84c7211f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56aF5aKo5LqR,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="三、人脸检测"><a href="#三、人脸检测" class="headerlink" title="三、人脸检测"></a>三、人脸检测</h3><p>人脸识别中的最基本任务是实现人脸检测，要先在一张图片中捕获到人脸，再去识别图片中的人脸和数据库中人脸数据进行比较。</p><p>人脸检测的最常见方法是使用”Haar 分类器”。基于 Haar 功能的级联分类器的对象检测是 Paul Viola 和 Michael Jones 提出的一种有效的对象检测、基于机器学习的方法。</p><p>进行人脸检测工作该算法需要大量的正图像（有人脸图像）和负图像（无人脸的图像）来训练分类器，然后从中提取特征。OpenCV 可以进行人脸的训练和推理。如果想训练自己的分类器为任何对象，如汽车，飞机等，也是可以用opencv去训练的。当然如果不想创建自己的分类器，OpenCV 已经包含许多预先训练过的面部、眼睛、微笑等分类器。这些 XML 文件可以从 haarcascades 目录下载。</p><p>XML下载网址：<a href="https://github.com/opencv/opencv/tree/master/data/haarcascades">opencv&#x2F;data&#x2F;haarcascades at master · opencv&#x2F;opencv · GitHub</a></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">faceCascade = cv2.CascadeClassifier(<span class="string">&#x27;Cascades/haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line"><span class="comment">#引入级联分类器文件</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">3</span>,<span class="number">640</span>) <span class="comment">#  Width</span></span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">4</span>,<span class="number">480</span>) <span class="comment">#  Height</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, img = cap.read()</span><br><span class="line">    img = cv2.flip(img, <span class="number">1</span>)</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    faces = faceCascade.detectMultiScale(</span><br><span class="line">        gray, scaleFactor=<span class="number">1.2</span>, minNeighbors=<span class="number">5</span>, minSize=(<span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">        cv2.rectangle(img,(x,y),(x+w,y+h),(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br><span class="line">        roi_gray = gray[y:y+h, x:x+w]</span><br><span class="line">        roi_color = img[y:y+h, x:x+w]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;video&#x27;</span>,img)</span><br><span class="line"></span><br><span class="line">    k = cv2.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>: <span class="comment"># &#x27;ESC&#x27; 退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>其中代码的这一部分是调用我们的分类器功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">faces = faceCascade.detectMultiScale(</span><br><span class="line">        gray,</span><br><span class="line">        scaleFactor=<span class="number">1.2</span>, </span><br><span class="line">        minNeighbors=<span class="number">5</span>, </span><br><span class="line">        minSize=(<span class="number">20</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>代码这一部分用来“标记（返回数值）”图像中的面孔，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">       cv2.rectangle(img,(x,y),(x+w,y+h),(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br><span class="line">       roi_gray = gray[y:y+h, x:x+w]</span><br><span class="line">       roi_color = img[y:y+h, x:x+w]</span><br></pre></td></tr></table></figure><p>如果发现人脸，它会返回检测到的面部位置，作为左上角（x，y）的矩形，并将”w”作为宽度，将”h”作为高度 &#x3D; &#x3D;（x，y，w，h）。如下图：</p><p><img src="https://img-blog.csdnimg.cn/7c16cc73743d4e469e182859a294b1d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56aF5aKo5LqR,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>如果可以实现以上功能，人脸检测功能基本实现，可以运行python代码。效果是这样的:</p><p><img src="https://img-blog.csdnimg.cn/0164cc483b8446ba8b803e07d0b4cf4d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56aF5aKo5LqR,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="四、采集人脸数据"><a href="#四、采集人脸数据" class="headerlink" title="四、采集人脸数据"></a>四、采集人脸数据</h3><p>让我们开始项目代码的第一阶段。我们在这要存储每个ID的一组照片用来后续进行人脸识别</p><p><img src="https://img-blog.csdnimg.cn/050b7c944b1b436f8486925a3dba5d40.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56aF5aKo5LqR,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>首先创建一个开发项目：FacialRecognition工程，创建一个数据集Dataset，存储我们的面部标本数据集。并且存储上述的调用默认Cam代码和人脸检测代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">cam = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">cam.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">640</span>) <span class="comment">#width</span></span><br><span class="line">cam.<span class="built_in">set</span>(<span class="number">4</span>, <span class="number">480</span>) <span class="comment">#height</span></span><br><span class="line"></span><br><span class="line">face_detector = cv2.CascadeClassifier(<span class="string">&#x27;haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##对每个人来说，输入一个数字表面id</span></span><br><span class="line">face_id = <span class="built_in">input</span>(<span class="string">&#x27;\n enter user id end press &lt;return&gt; ==&gt;  &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n [INFO] Initializing face capture. Look the camera and wait ...&quot;</span>)</span><br><span class="line"><span class="comment"># 初始化单个采样面数量</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line"></span><br><span class="line">    ret, img = cam.read()</span><br><span class="line">    img = cv2.flip(img, <span class="number">1</span>) <span class="comment"># flip video image vertically</span></span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    faces = face_detector.detectMultiScale(gray, <span class="number">1.3</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">        cv2.rectangle(img, (x,y), (x+w,y+h), (<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="number">2</span>)     </span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Save the captured image into the datasets folder</span></span><br><span class="line">        cv2.imwrite(<span class="string">&quot;dataset/User.&quot;</span> + <span class="built_in">str</span>(face_id) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(count) + <span class="string">&quot;.jpg&quot;</span>, gray[y:y+h,x:x+w])</span><br><span class="line"></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img)</span><br><span class="line"></span><br><span class="line">    k = cv2.waitKey(<span class="number">100</span>) &amp; <span class="number">0xff</span> <span class="comment"># Press &#x27;ESC&#x27; for exiting video</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> count &gt;= <span class="number">30</span>: <span class="comment"># 30个样本后停止视频，也可酌情更改数量</span></span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cam.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>对于每个捕获的帧，我们都把他保存在”dataset”目录上的文件。.注意一下，要保存上述文件，必须导入库”os”。每个文件的名称格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.imwrite(&quot;dataset/User.&quot; + str(face_id) + &#x27;.&#x27; + str(count) + &quot;.jpg&quot;, gray[y:y+h,x:x+w])</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.face_id.count.jpg</span><br></pre></td></tr></table></figure></blockquote><p>就像这样：</p><p><img src="https://img-blog.csdnimg.cn/a8a07e70115b4066af3e1c348962b5d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56aF5aKo5LqR,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="五、训练模型"><a href="#五、训练模型" class="headerlink" title="五、训练模型"></a>五、训练模型</h3><p>现在要把之前存储的各个id号的图片提取特征，然后用来训练识别器。最后识别器上会生成一个yml文件。</p><p><img src="https://img-blog.csdnimg.cn/7c277d88c5044d08b4427ec146e23193.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56aF5aKo5LqR,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>首先在终端下载PIL库，函数getImagesAndLabels (path)将从我们刚刚的数据集上收集到ID号和对应的人脸特征</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recognizer = cv2.face.LBPHFaceRecognizer_create()</span><br></pre></td></tr></table></figure><p>函数recogizer.train()通过刚刚读取的特征去训练我们的人脸识别器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recognizer.train(faces, np.array(ids))</span><br></pre></td></tr></table></figure><p><strong>具体代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人脸图像数据库的路径</span></span><br><span class="line">path = <span class="string">&#x27;dataset&#x27;</span></span><br><span class="line"></span><br><span class="line">recognizer = cv2.face.LBPHFaceRecognizer_create()</span><br><span class="line">detector = cv2.CascadeClassifier(<span class="string">&quot;haarcascade_frontalface_default.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数来获取图像和标签数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getImagesAndLabels</span>(<span class="params">path</span>):</span><br><span class="line"></span><br><span class="line">    imagePaths = [os.path.join(path,f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path)]     </span><br><span class="line">    faceSamples=[]</span><br><span class="line">    ids = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:</span><br><span class="line"></span><br><span class="line">        PIL_img = Image.<span class="built_in">open</span>(imagePath).convert(<span class="string">&#x27;L&#x27;</span>) <span class="comment"># 将其转换为灰度</span></span><br><span class="line">        img_numpy = np.array(PIL_img,<span class="string">&#x27;uint8&#x27;</span>)</span><br><span class="line">        iid=os.path.split(imagePath)[-<span class="number">1</span>].split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(iid)</span><br><span class="line">        <span class="built_in">id</span> = <span class="built_in">int</span>(os.path.split(imagePath)[-<span class="number">1</span>].split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">        faces = detector.detectMultiScale(img_numpy)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">            faceSamples.append(img_numpy[y:y+h,x:x+w])</span><br><span class="line">            ids.append(<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> faceSamples,ids</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;\n [INFO] Training faces. It will take a few seconds. Wait ...&quot;</span>)</span><br><span class="line">faces,ids = getImagesAndLabels(path)</span><br><span class="line">recognizer.train(faces, np.array(ids))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存训练出的模型于 trainer/trainer.yml</span></span><br><span class="line">recognizer.write(<span class="string">&#x27;trainer/trainer.yml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印训练的序号并结束程序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n [INFO] &#123;0&#125; faces trained. Exiting Program&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(np.unique(ids))))</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/f69f9dba9a9a4d99a4ec12eb0d676118.png#pic_center" alt="在这里插入图片描述"></p><h3 id="第六步：人脸识别"><a href="#第六步：人脸识别" class="headerlink" title="第六步：人脸识别"></a>第六步：人脸识别</h3><p>人脸识别器已经实现，现在要在相机上捕获人脸。如果此人之前拍摄并训练过他的脸，识别器将做出预测，返回ID名和索引。</p><p><img src="https://img-blog.csdnimg.cn/08264505bca046bfbd4ffdb24f80b215.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56aF5aKo5LqR,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>使用刚刚训练的识别器模型(加载trainer.yml)，这里使用了新的数组，用姓名代替之前的标号，然后就和刚刚“人脸分类器”的步骤一样去进行人脸识别，并且recognizer.predict将返回每张图片识别后的匹配率。</p><p>具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"></span><br><span class="line">recognizer = cv2.face.LBPHFaceRecognizer_create()</span><br><span class="line">recognizer.read(<span class="string">&#x27;trainer/trainer.yml&#x27;</span>)</span><br><span class="line">cascadePath = <span class="string">&quot;haarcascade_frontalface_default.xml&quot;</span></span><br><span class="line">faceCascade = cv2.CascadeClassifier(cascadePath);</span><br><span class="line"></span><br><span class="line">font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化身份计数器</span></span><br><span class="line"><span class="built_in">id</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关id名称：例如==&gt;马塞洛：id=1 等等</span></span><br><span class="line">names = [<span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;Chanmo&#x27;</span>, <span class="string">&#x27;Wang&#x27;</span>,]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化和启动实时视频捕获</span></span><br><span class="line">cam = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">cam.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">640</span>) <span class="comment">#  widht</span></span><br><span class="line">cam.<span class="built_in">set</span>(<span class="number">4</span>, <span class="number">480</span>) <span class="comment"># height</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义最小化到检测框大小被承认为一张脸</span></span><br><span class="line">minW = <span class="number">0.1</span>*cam.get(<span class="number">3</span>)</span><br><span class="line">minH = <span class="number">0.1</span>*cam.get(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    ret, img =cam.read()</span><br><span class="line">    img = cv2.flip(img, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    faces = faceCascade.detectMultiScale( </span><br><span class="line">        gray,</span><br><span class="line">        scaleFactor = <span class="number">1.2</span>,</span><br><span class="line">        minNeighbors = <span class="number">5</span>,</span><br><span class="line">        minSize = (<span class="built_in">int</span>(minW), <span class="built_in">int</span>(minH)),</span><br><span class="line">       )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line"></span><br><span class="line">        cv2.rectangle(img, (x,y), (x+w,y+h), (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">id</span>, confidence = recognizer.predict(gray[y:y+h,x:x+w])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#检查是否完美的匹配</span></span><br><span class="line">        <span class="keyword">if</span> (confidence &lt; <span class="number">100</span>):</span><br><span class="line">            <span class="built_in">id</span> = names[<span class="built_in">id</span>]</span><br><span class="line">            confidence = <span class="string">&quot;  &#123;0&#125;%&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(<span class="number">100</span> - confidence))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">id</span> = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">            confidence = <span class="string">&quot;  &#123;0&#125;%&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(<span class="number">100</span> - confidence))</span><br><span class="line">        </span><br><span class="line">        cv2.putText(img, <span class="built_in">str</span>(<span class="built_in">id</span>), (x+<span class="number">5</span>,y-<span class="number">5</span>), font, <span class="number">1</span>, (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">        cv2.putText(img, <span class="built_in">str</span>(confidence), (x+<span class="number">5</span>,y+h-<span class="number">5</span>), font, <span class="number">1</span>, (<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">1</span>)  </span><br><span class="line">    </span><br><span class="line">    cv2.imshow(<span class="string">&#x27;camera&#x27;</span>,img) </span><br><span class="line"></span><br><span class="line">    k = cv2.waitKey(<span class="number">10</span>) &amp; <span class="number">0xff</span> <span class="comment"># Press &#x27;ESC&#x27; for exiting video</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n [INFO] Exiting Program and cleanup stuff&quot;</span>)</span><br><span class="line">cam.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="https://img-blog.csdnimg.cn/676ca5e03401477a8eb7d72ea03db303.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56aF5aKo5LqR,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="OpenCv" scheme="https://chanmoyun.gitee.io/categories/Python/OpenCv/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
    <category term="OpenCv" scheme="https://chanmoyun.gitee.io/tags/OpenCv/"/>
    
    <category term="实战" scheme="https://chanmoyun.gitee.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>利用Matlab快速构建栅格地图</title>
    <link href="https://chanmoyun.gitee.io/2022/04/11/Path-planning/%E5%88%A9%E7%94%A8Matlab%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E6%A0%85%E6%A0%BC%E5%9C%B0%E5%9B%BE/"/>
    <id>https://chanmoyun.gitee.io/2022/04/11/Path-planning/%E5%88%A9%E7%94%A8Matlab%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E6%A0%85%E6%A0%BC%E5%9C%B0%E5%9B%BE/</id>
    <published>2022-04-10T16:00:00.000Z</published>
    <updated>2024-01-09T03:10:18.845Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="利用Matlab快速构建栅格地图"><a href="#利用Matlab快速构建栅格地图" class="headerlink" title="利用Matlab快速构建栅格地图"></a>利用Matlab快速构建栅格地图</h1><h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>你好，我是禅墨！好久，不见！</p>    <div id="aplayer-KAVsSIwZ" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1888915574" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>在这之后，会陆续出路径规划系列，重点在几大算法的Matlab的仿真。学习参考来自黎万洪老师，让我们共同进步，加油！</p><p>​         栅格图像，也称光栅图像，是指在空间和亮度上都已经离散化了的图像。我们可以把一幅栅格图像考虑为一个矩阵，矩阵中的任一元素对应于图像中的一个点，而相应的值对应于该点的灰度级，数字矩阵中的元素叫做像素。</p><h3 id="二、地图分类"><a href="#二、地图分类" class="headerlink" title="二、地图分类"></a>二、地图分类</h3><p><strong>1.尺度地图：</strong></p><p>具有真实的物理尺寸，如栅格地图、特征地图、点云地图等，常用于地图构建、定位、SLAM、小规模路径规划。</p><p><strong>2.拓扑地图：</strong></p><p>不具备真实的物理尺寸，只表示不同地点的连通关系 和距离，如铁路网。</p><p><strong>3.语义地图：</strong></p><p>加标签的尺度地图，常用于人机交互，如百度地图。</p><h3 id="三、栅格地图优势"><a href="#三、栅格地图优势" class="headerlink" title="三、栅格地图优势"></a>三、栅格地图优势</h3><ul><li>可以将任意形状轮廓的地图，用足够精细的栅格进行绘制</li><li>每一栅格，可以通过不同颜色表征不同含义</li><li>基于栅格地图进行路径规划有横、纵、斜三个规划方向，对与室内低速度机器人完全可以按照规划路径行走；对于中高速机器人，可以考虑将规划路径平滑处理，适应非完全约束系统。</li></ul><h3 id="四、核心函数及思想"><a href="#四、核心函数及思想" class="headerlink" title="四、核心函数及思想"></a>四、核心函数及思想</h3><ul><li>colormap: 为栅格地图创建自定义颜色</li><li>sub2ind: 将行列索引转换为线性索引（自上而下，自左往右）</li><li>ind2sub：将线性索引转换为行列索引</li><li>image：利用colormap建立的颜色图，将数组信息显示为图像</li></ul><h3 id="五、Matlab程序及注释"><a href="#五、Matlab程序及注释" class="headerlink" title="五、Matlab程序及注释"></a>五、Matlab程序及注释</h3><p>% 利用Matlab快速绘制栅格地图</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">clc</span><br><span class="line">clear</span><br><span class="line">close all</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 构建颜色MAP图</span></span><br><span class="line">cmap = [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>; ...       <span class="comment">% 1-白色-空地</span></span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>; ...           <span class="comment">% 2-黑色-静态障碍</span></span><br><span class="line">    <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>; ...           <span class="comment">% 3-红色-动态障碍</span></span><br><span class="line">    <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>;...            <span class="comment">% 4-黄色-起始点 </span></span><br><span class="line">    <span class="number">1</span> <span class="number">0</span> <span class="number">1</span>;...            <span class="comment">% 5-品红-目标点</span></span><br><span class="line">    <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>; ...           <span class="comment">% 6-绿色-到目标点的规划路径   </span></span><br><span class="line">    <span class="number">0</span> <span class="number">1</span> <span class="number">1</span>];              <span class="comment">% 7-青色-动态规划的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 构建颜色MAP图</span></span><br><span class="line">colormap(cmap);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 构建栅格地图场景</span></span><br><span class="line"><span class="comment">% 栅格界面大小:行数和列数</span></span><br><span class="line">rows = <span class="number">10</span>;</span><br><span class="line">cols = <span class="number">20</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">% 定义栅格地图全域，并初始化空白区域</span></span><br><span class="line">field = <span class="built_in">ones</span>(rows, cols);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 障碍物区域</span></span><br><span class="line">obsRate = <span class="number">0.3</span>;</span><br><span class="line">obsNum = <span class="built_in">floor</span>(rows*cols*obsRate);</span><br><span class="line">obsIndex = randi([<span class="number">1</span>,rows*cols],obsNum,<span class="number">1</span>);</span><br><span class="line">field(obsIndex) = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 起始点和目标点</span></span><br><span class="line">startPos = <span class="number">2</span>;</span><br><span class="line">goalPos = rows*cols<span class="number">-2</span>;</span><br><span class="line">field(startPos) = <span class="number">4</span>;</span><br><span class="line">field(goalPos) = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 画栅格图</span></span><br><span class="line">image(<span class="number">1.5</span>,<span class="number">1.5</span>,field);</span><br><span class="line">grid on;</span><br><span class="line">set(gca,<span class="string">&#x27;gridline&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;gridcolor&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;GridAlpha&#x27;</span>,<span class="number">0.5</span>);</span><br><span class="line">set(gca,<span class="string">&#x27;xtick&#x27;</span>,<span class="number">1</span>:cols+<span class="number">1</span>,<span class="string">&#x27;ytick&#x27;</span>,<span class="number">1</span>:rows+<span class="number">1</span>);</span><br><span class="line">axis image;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="仿真" scheme="https://chanmoyun.gitee.io/categories/%E4%BB%BF%E7%9C%9F/"/>
    
    <category term="路径规划" scheme="https://chanmoyun.gitee.io/categories/%E4%BB%BF%E7%9C%9F/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/"/>
    
    
    <category term="路径规划" scheme="https://chanmoyun.gitee.io/tags/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92/"/>
    
    <category term="MatLab" scheme="https://chanmoyun.gitee.io/tags/MatLab/"/>
    
  </entry>
  
  <entry>
    <title>HEXO命令</title>
    <link href="https://chanmoyun.gitee.io/2021/05/21/Other/hexo%E5%91%BD%E4%BB%A4/"/>
    <id>https://chanmoyun.gitee.io/2021/05/21/Other/hexo%E5%91%BD%E4%BB%A4/</id>
    <published>2021-05-20T16:00:00.000Z</published>
    <updated>2024-01-09T03:22:59.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-zlbpShsm" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1938306787" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>npm install hexo-cli -g</p><p>hexo init Hexoblog</p><p>cd Hexoblog</p><p>npm install</p><p>npm install –save hexo-tag-aplayer</p><p>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</p><p>ssh-keygen -t rsa -C “<a href="mailto:&#49;&#x37;&#x38;&#x38;&#x33;&#56;&#x30;&#55;&#x36;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;">&#49;&#x37;&#x38;&#x38;&#x33;&#56;&#x30;&#55;&#x36;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a>“</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="hexo" scheme="https://chanmoyun.gitee.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://chanmoyun.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Requests PK 豆瓣&amp;肯德基|6</title>
    <link href="https://chanmoyun.gitee.io/2021/01/31/Reptile-Learn/06.Requests%20PK%20%E8%B1%86%E7%93%A3&amp;%E8%82%AF%E5%BE%B7%E5%9F%BA/"/>
    <id>https://chanmoyun.gitee.io/2021/01/31/Reptile-Learn/06.Requests%20PK%20%E8%B1%86%E7%93%A3&amp;%E8%82%AF%E5%BE%B7%E5%9F%BA/</id>
    <published>2021-01-30T16:00:00.000Z</published>
    <updated>2024-01-09T03:09:18.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Requests-PK-豆瓣-肯德基"><a href="#Requests-PK-豆瓣-肯德基" class="headerlink" title="Requests PK 豆瓣&amp;肯德基"></a>Requests PK 豆瓣&amp;肯德基</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是<strong>禅墨</strong>！</p>    <div id="aplayer-DRTIZgvn" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1415078941" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>之前我们主要学习了Requests模块，掌握的怎么样呢，</p><p>今天就做两个小练习，不多说任何废话！</p><p>不知道步骤的可以翻看之前的文章！</p><ul><li><a href="https://blog.csdn.net/qq_44090770/article/details/113263163">Requests第一血</a></li><li><a href="https://blog.csdn.net/qq_44090770/article/details/113327058">简易网页采集</a></li><li><a href="https://blog.csdn.net/qq_44090770/article/details/113376220">破解百度翻译</a></li></ul><h2 id="爬取豆瓣电影排行"><a href="#爬取豆瓣电影排行" class="headerlink" title="爬取豆瓣电影排行"></a>爬取豆瓣电影排行</h2><p>在这里以喜剧为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?&#x27;</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;24&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="comment">#从库中的第几部电影去取</span></span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27;20&#x27;</span>, <span class="comment">#一次取出的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=url,params=param,headers=headers)</span><br><span class="line"></span><br><span class="line">    list_data = response.json()</span><br><span class="line">    <span class="built_in">print</span>(list_data)</span><br><span class="line"></span><br><span class="line">    filename = <span class="built_in">input</span>(<span class="string">&#x27;Enter a word:&#x27;</span>)+<span class="string">&#x27;.json&#x27;</span></span><br><span class="line">    fp = <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(list_data,fp=fp,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;OK!&#x27;</span>)</span><br><span class="line">https://movie.douban.com/typerank?type_name=%E5%<span class="number">96</span>%9C%E5%<span class="number">89</span>%A7&amp;<span class="built_in">type</span>=<span class="number">24</span>&amp;interval_id=<span class="number">100</span>:<span class="number">90</span>&amp;action=</span><br></pre></td></tr></table></figure><p><strong>需要注意的是</strong>：之前我们的post请求，都是只带有一个参数的，那多个参数怎么办呢，其实你已经创建过字典了，只需要把其他参数加进去就行了。</p><h2 id="肯德基餐厅位置"><a href="#肯德基餐厅位置" class="headerlink" title="肯德基餐厅位置"></a>肯德基餐厅位置</h2><p>这个就更不用多说了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    city = <span class="built_in">input</span>(<span class="string">&quot;Enter a city:&quot;</span>)</span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;cname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;keyword&#x27;</span>: city,</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url=url,params=param,headers=headers)</span><br><span class="line">    data_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(data_text)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;filename = city+&#x27;.txt&#x27;</span></span><br><span class="line"><span class="string">    with open(filename,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp:</span></span><br><span class="line"><span class="string">        fp.write(data_text)&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;OK!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>OK！这就是本篇文章全部内容了！</p><p>欢迎关注禅墨云，我们不见不散！</p><p>博客网站同步更新，网址：<strong>chanmoyun.gitee.io</strong></p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210129115055180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="这里是引用"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>破解百度翻译|5</title>
    <link href="https://chanmoyun.gitee.io/2021/01/29/Reptile-Learn/05.%E7%A0%B4%E8%A7%A3%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91/"/>
    <id>https://chanmoyun.gitee.io/2021/01/29/Reptile-Learn/05.%E7%A0%B4%E8%A7%A3%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91/</id>
    <published>2021-01-28T16:00:00.000Z</published>
    <updated>2024-01-09T03:09:10.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="破解百度翻译-5"><a href="#破解百度翻译-5" class="headerlink" title="破解百度翻译|5"></a>破解百度翻译|5</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是<strong>禅墨</strong>！</p>    <div id="aplayer-yKkDdIbU" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1409329965" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>转眼间就到了周五了，happy啊！</p><p>上篇文章我们做了一个简易得网页采集器，感觉没啥难度，那这次我们就再做一个没啥难度的东西，搞一下百度翻译，想了想，还是最后把程序打一下包，作为一个小工具使用！</p><h2 id="指定url及响应分析"><a href="#指定url及响应分析" class="headerlink" title="指定url及响应分析"></a>指定url及响应分析</h2><p>你看，爬虫第一步总是要指定URL，但是这个是需要我们在浏览器中寻找的。</p><ol><li><p>打开浏览器(以Chrome为例)找到百度翻译首页，思考一下，首页会是我们要破解的内容吗？那我们需要获取的内容是哪些呢？不妨我们输入一个单词，比如说:cat，这时我们看一下页面上就会出现具体的内容。那红框线框出来的就是我们需要的内容。[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传<img src="https://img-blog.csdnimg.cn/20210129114933572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>那我们如何找到这一部分内容呢，按下F12，找network，页面响应对应的XHR，这时会发现什么都没有，我们需要把刚刚的cat删掉，这时我们会在右边直接看到有两个sug,我们点开headers往下查找，会发现从上往下对应的分别是kw:ca，kw:c ，这是不是就是我们删除时留下的字母顺序，那说明我们要找的界面就是它吧。</p><p><img src="https://img-blog.csdnimg.cn/20210129114947512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>我们翻看到前面会发现，他的完整请求地址，以及类型为POST，说明这是一个带有参数的请求，参数是什么呢，是不是就是我们刚刚寻找到的kw啊</p></li></ol><p>  <img src="https://img-blog.csdnimg.cn/20210129115000976.png#pic_center" alt="在这里插入图片描述"></p><ol start="4"><li><p>我们来复盘一下，针对这个请求地址，post请求每次多携带一个字符作为参数向服务器发送请求，直到组成我们需要翻译的单词，然后服务器会响应请求，做出回应数据。那么响应类型是什么呢？</p></li><li><p>我们会看到一个Response Headers，这就是响应的具体内容，Content-Type说明这时一个json响应。</p></li></ol><p>  <img src="https://img-blog.csdnimg.cn/20210129115011610.png#pic_center" alt="在这里插入图片描述"></p><h2 id="编码详情"><a href="#编码详情" class="headerlink" title="编码详情"></a>编码详情</h2><p>前面的准备工作我们已经做的很充分了，后面就是按照正常的顺序进行敲代码了，不清楚的可以回看这里</p><blockquote><p><a href="https://chanmoyun.gitee.io/2021/01/28/04.%E7%AE%80%E6%98%93%E7%BD%91%E9%A1%B5%E9%87%87%E9%9B%86/">https://chanmoyun.gitee.io/2021/01/28/04.%E7%AE%80%E6%98%93%E7%BD%91%E9%A1%B5%E9%87%87%E9%9B%86/</a></p></blockquote><p>在这里需要声明一点，我们之前使用的是text()获取响应数据的，但是对于json类型，我们需要用json()获取响应数据，返回的是obj类型。</p><p>源码及解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 1-指定url</span></span><br><span class="line">    post_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">    <span class="comment"># 2-进行UA伪装</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># 3-post请求参数处理（同get请求一致）</span></span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&#x27;Enter a word:&#x27;</span>)</span><br><span class="line">    data = &#123;<span class="string">&#x27;kw&#x27;</span>:word&#125;</span><br><span class="line">    <span class="comment"># 4-请求发送</span></span><br><span class="line">    response = requests.post(url=post_url,data=data,headers=headers)</span><br><span class="line">    <span class="comment"># 5-获取响应数据：json()方法返回的是obj(如果确认响应数据是json类型的，才能使用json())</span></span><br><span class="line">    dic_obj = response.json()</span><br><span class="line">    <span class="built_in">print</span>(dic_obj)</span><br><span class="line">    <span class="comment"># 持久化存储</span></span><br><span class="line">    filename = word+<span class="string">&#x27;.json&#x27;</span></span><br><span class="line">    fp = <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(dic_obj,fp=fp,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;OK!&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="制作exe可执行文件"><a href="#制作exe可执行文件" class="headerlink" title="制作exe可执行文件"></a>制作exe可执行文件</h2><p>当我们想具体使用时，总不能每次都去打开编辑器运行吧，所以我们需要对程序进行打包，有很多方式，这里我们选择pyinstaller工具包</p><ol><li><p>首先，打开工具包，我们直接输入命令，这样安装的就是在全局变量中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><p>如果之前按照步骤更改过pip镜像源，安装起来就会非常快（文章环境安装部分<a href="https://chanmoyun.gitee.io/2021/01/27/03.Requests%E7%AC%AC%E4%B8%80%E8%A1%80/%EF%BC%89">https://chanmoyun.gitee.io/2021/01/27/03.Requests%E7%AC%AC%E4%B8%80%E8%A1%80/）</a></p></li><li><p>安装完成之后，我们可以在cmd中切换到想要打包的文件所在的文件夹下，但是如果使用的pycharm，直接点击下方的Terminal即可。</p></li><li><p>在打包之前，我们需要考虑，程序执行一次只能翻译一个，我们是不是需要给他写成死循环啊，然后我们之前定义的是有永久化存储的，现在也不需要了，所以我们的程序就可以改成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    <span class="comment"># 1-指定url</span></span><br><span class="line">    post_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">    <span class="comment"># 2-进行UA伪装</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># 3-post请求参数处理（同get请求一致）</span></span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&#x27;Enter a word:&#x27;</span>)</span><br><span class="line">    data = &#123;<span class="string">&#x27;kw&#x27;</span>:word&#125;</span><br><span class="line">    <span class="comment"># 4-请求发送</span></span><br><span class="line">    response = requests.post(url=post_url,data=data,headers=headers)</span><br><span class="line">    <span class="comment"># 5-获取响应数据：json()方法返回的是obj(如果确认响应数据是json类型的，才能使用json())</span></span><br><span class="line">    dic_obj = response.json()</span><br><span class="line">    <span class="built_in">print</span>(dic_obj)</span><br></pre></td></tr></table></figure></li><li><p>那你想没想过，pyinstaller打包的是整个环境，如果你的当前环境有很多包，那是不是打包就会很慢，甚至会出现打包失败，就算会成功那也会生成很大的文件，那怎么办？有pycharm这么优秀的工具不能浪费啊，我们可以单独建一个虚拟环境，把py文件写在里面，里面只有需要的包，其他都不要，这样不就全部解决了。</p></li><li><p>接下来就正式打包了</p><p>完整示例(不是本程序)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -i tra.ico main.py -n Tra --noconsole</span><br></pre></td></tr></table></figure><table><thead><tr><th>功能</th><th>注释</th></tr></thead><tbody><tr><td>-F</td><td>打包成一个文件</td></tr><tr><td>-D</td><td>打包成一个文件夹</td></tr><tr><td>-n</td><td>重新命名</td></tr><tr><td>–noconsole</td><td>去掉cmd</td></tr><tr><td>-i</td><td>加入图标，需要转化为ico</td></tr></tbody></table><p>针对本程序，我们其实只需要输入简短命令就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F Baidu-translation</span><br></pre></td></tr></table></figure></li></ol><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>OK！这就是本篇文章全部内容了！</p><p>欢迎关注禅墨云，我们不见不散！</p><p>博客网站同步更新，网址：<strong>chanmoyun.gitee.io</strong></p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210129115055180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="这里是引用"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>简易网页采集器|4</title>
    <link href="https://chanmoyun.gitee.io/2021/01/28/Reptile-Learn/04.%E7%AE%80%E6%98%93%E7%BD%91%E9%A1%B5%E9%87%87%E9%9B%86/"/>
    <id>https://chanmoyun.gitee.io/2021/01/28/Reptile-Learn/04.%E7%AE%80%E6%98%93%E7%BD%91%E9%A1%B5%E9%87%87%E9%9B%86/</id>
    <published>2021-01-27T16:00:00.000Z</published>
    <updated>2024-01-09T03:09:02.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="简易网页采集-4"><a href="#简易网页采集-4" class="headerlink" title="简易网页采集|4"></a>简易网页采集|4</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是<strong>禅墨</strong>！</p>    <div id="aplayer-EkmHFXTZ" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1811921555" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>之前啊，我们接触到了requests模块，知道他是干什么的，但是要掌握一个模块，就要去练习，去实战。</p><p>之后呢，我们一起做五个小实战项目加以掌握：</p><blockquote><ol><li>简易网页采集器，爬取百度指定词条对应的搜索结果页面</li><li>破解百度翻译</li><li>爬取豆瓣电影分类排行榜，<a href="https://movie.douban.com/">https://movie.douban.com/</a>  中的电影详情数据</li><li>爬取肯德基餐厅查询 <a href="https://www.kfc.com.cn/kfccda/index.aspx">https://www.kfc.com.cn/kfccda/index.aspx</a>  中指定地点的餐厅数据</li><li>爬取国家药品监督管理总局中基于中华人民共和国化妆品生产许可证相关数据  <a href="http://scxk.nmpa.gov.cn:81/xk/">http://scxk.nmpa.gov.cn:81/xk/</a></li></ol></blockquote><p>前四个都是比较简单的项目，最后一个其实是需要一些复杂的步骤的，我们到时候再说，本篇文章我们就先从第一个开始吧！</p><h2 id="编码顺序"><a href="#编码顺序" class="headerlink" title="编码顺序"></a>编码顺序</h2><h4 id="指定url"><a href="#指定url" class="headerlink" title="指定url"></a>指定url</h4><p>首先我们打开百度首页：</p><blockquote><p><a href="https://www.baidu.com/">https://www.baidu.com/</a></p></blockquote><p>输入我们要搜索的词条，以禅墨云为例，我们在网址栏会发现，很长一段字符</p><blockquote><p><a href="https://www.baidu.com/s?wd=%E7%A6%85%E5%A2%A8%E4%BA%91&rsv_spt=1&rsv_iqid=0xaea3079900012b5e&issp=1&f=8&rsv_bp=1&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=1&rsv_dl=tb&rsv_sug3=23&rsv_sug1=24&rsv_sug7=101&rsv_sug2=0&rsv_btype=i&inputT=12683&rsv_sug4=13427">https://www.baidu.com/s?wd=禅墨云&amp;rsv_spt=1&amp;rsv_iqid=0xaea3079900012b5e&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=23&amp;rsv_sug1=24&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_btype=i&amp;inputT=12683&amp;rsv_sug4=13427</a></p></blockquote><p>其实呢我们把后面的全部删掉，只留下禅墨云之前的也是没问题的：</p><blockquote><p><a href="https://www.baidu.com/s?wd=%E7%A6%85%E5%A2%A8%E4%BA%91">https://www.baidu.com/s?wd=禅墨云</a></p></blockquote><p>有时url中携带的不只有一个参数，也就是说我们需要把搜索的词条变为动态的，所以我们需要url进行简单的处理：封装到字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kw = <span class="built_in">input</span>(<span class="string">&#x27;enter a word：&#x27;</span>)</span><br><span class="line">    param = &#123;<span class="string">&#x27;wd&#x27;</span>:kw&#125;</span><br></pre></td></tr></table></figure><p>这时就可以把前面的url词条去掉，变为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?</span><br></pre></td></tr></table></figure><p>这样，搜索结果就变成我们想要搜索的任何词条</p><h4 id="UA检测与伪装"><a href="#UA检测与伪装" class="headerlink" title="UA检测与伪装"></a>UA检测与伪装</h4><p><strong>UA检测</strong>：门户网站的服务器会检测对应请求载体的身份标识，如果检测到请求的载体身份标识为某一款浏览器说明这是一个正常的请求。但是，如果检测到请求的载体身份标识不是基于某一款浏览器，则表示该请求为不正常请求（爬虫检测），则服务端就会拒绝该次请求。</p><p><strong>UA伪装</strong>：让爬虫对应的请求载体身份标识伪装成某一款浏览器</p><p>其实只需要在url前面加上 <strong>headers</strong> 就可以了，里面包含了键值User-Agent，以及详细的value值</p><p>在浏览器中(以Chrome为例)点击F12，点击network，刷新后会出现很多文件，随便点击一个，打开headers，找到User-Agent对应处即可，然后复制其内容。</p><p><img src="https://img-blog.csdnimg.cn/20210128124342695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>之后的就是常规操作了。</p><h2 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h2><p>下面的就是完整的程序以及注释了，仅供学习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --coding:utf-8 --</span></span><br><span class="line"><span class="comment">#UA:User-Agent(请求载体的身份标识)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#UA检测：门户网站的服务器会检测对应请求载体的身份标识，如果检测到请求的载体身份标识为某一款浏览器</span></span><br><span class="line"><span class="comment">#说明这是一个正常的请求。但是，如果检测到请求的载体身份标识不是基于某一款浏览器，则表示该请求为</span></span><br><span class="line"><span class="comment">#不正常请求（爬虫检测），则服务端就会拒绝该次请求。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#UA伪装：让爬虫对应的请求载体身份标识伪装成某一款浏览器</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">##UA伪装：将对应的User-Agent封装到一个字典中</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line">    <span class="comment">#处理url携带的参数：封装到字典中</span></span><br><span class="line">    kw = <span class="built_in">input</span>(<span class="string">&#x27;enter a word：&#x27;</span>)</span><br><span class="line">    param = &#123;<span class="string">&#x27;wd&#x27;</span>:kw&#125;</span><br><span class="line">    <span class="comment">#对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数</span></span><br><span class="line">    response = requests.get(url=url,params=param,headers=headers)</span><br><span class="line">    page_text = response.text</span><br><span class="line">    filename = kw+<span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(filename,<span class="string">&#x27;保存成功！&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>OK！这就是本篇文章全部内容了！</p><p>欢迎关注禅墨云，我们不见不散！</p><p>博客网站同步更新，网址：<strong>chanmoyun.gitee.io</strong></p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210127184252320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Requests第一血|3</title>
    <link href="https://chanmoyun.gitee.io/2021/01/27/Reptile-Learn/03.Requests%E7%AC%AC%E4%B8%80%E8%A1%80/"/>
    <id>https://chanmoyun.gitee.io/2021/01/27/Reptile-Learn/03.Requests%E7%AC%AC%E4%B8%80%E8%A1%80/</id>
    <published>2021-01-26T16:00:00.000Z</published>
    <updated>2024-01-09T03:08:53.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Requests第一血-3"><a href="#Requests第一血-3" class="headerlink" title="Requests第一血|3"></a>Requests第一血|3</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是<strong>禅墨</strong>！</p>    <div id="aplayer-zgyIPUDi" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="399354289" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>今天发现一个有趣的现象，在家人眼里，我玩电子就是一个修手机、电器的！</p><p>然后去问了别人，他说他学的是农工，然后他妈妈就以为他以后毕业是开拖拉机的。</p><p>那么各位看官们，在你家长眼里，你所学的专业毕业后是 干什么的，我们评论区见！</p><p>从这篇文章开始，才算真正意义上的和代码打交道了，写代码之前，首先就要选择一个编辑器，哪个好用呢，当然是Pycharm啊，这还用问吗，对不对！</p><h2 id="网络请求模块"><a href="#网络请求模块" class="headerlink" title="网络请求模块"></a>网络请求模块</h2><ul><li><strong>urllib模块</strong> :较为古老，多用于Python2.x中，使用较为繁琐，但功能基本满足爬虫，有助于深入理解requests模块</li><li><strong>requests模块</strong>：Python中原生的一款基于网络请求的模块，功能非常强大，使用简单便捷，效率极高，作用于模拟浏览器发送请求。</li></ul><h2 id="Requests模块的编码顺序"><a href="#Requests模块的编码顺序" class="headerlink" title="Requests模块的编码顺序"></a>Requests模块的编码顺序</h2><ol><li><strong>指定url</strong>，所请求页面所在的网址</li><li><strong>发起请求</strong>，向服务器发送请求，得到一个响应对象</li><li><strong>获取响应数据</strong>，数据包含请求页面的源码信息</li><li><strong>持久化存储</strong>，将得到的数据存储到本地或数据库</li></ol><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>默认你已安装Python解释器，并且已经将其加入到环境当中</p><p>如果安装的是Pycharm,直接在设置里面安装即可，或者打开CMD</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>pip 速度缓慢怎么办呢，那就换国内镜像源(以清华为例)，一劳永逸解决</p><p>首先打开CMD,输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127184354507.png#pic_center" alt="在这里插入图片描述"></p><p>看到上图所示结果，找到生成的pip.ini，打开它，我们会看到:</p><p><img src="https://img-blog.csdnimg.cn/20210127184341163.png#pic_center" alt="在这里插入图片描述"></p><p>大功告成，就可以丝滑得下载第三方库了</p><h2 id="实战编码"><a href="#实战编码" class="headerlink" title="实战编码"></a>实战编码</h2><p><strong>需求</strong>：爬取百度首页数据并存储到本地</p><p>程序及注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --coding:utf-8 --</span></span><br><span class="line"><span class="comment"># 需求：爬取百度首页页面数据</span></span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#step 1:指定url</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">    <span class="comment">#step 2:发起请求</span></span><br><span class="line">    <span class="comment">#get方法会返回一个响应对象</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="comment">#step 3:获取响应数据.text 返回的是字符串形式的响应数据</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line">    <span class="comment">#step 4:持久化存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./baidu.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结束后会看到此工程文件夹里生成了一个网页：baidu.html</p><h2 id="文件操作说明"><a href="#文件操作说明" class="headerlink" title="文件操作说明"></a>文件操作说明</h2><blockquote><p>open(path, ‘-模式-‘,encoding&#x3D;’UTF-8’)<br>即open(路径+文件名, 读写模式, 编码)</p></blockquote><p>读写模式：<br>r ：只读<br>r+ : 读写<br>w ： 新建（会对原有文件进行覆盖）<br>a ： 追加<br>b ： 二进制文件</p><p>常用的模式有：<br>“a” 以“追加”模式打开， (从 EOF 开始, 必要时创建新文件)<br>“a+” 以”读写”模式打开<br>“ab” 以”二进制 追加”模式打开<br>“ab+” 以”二进制 读写”模式打开</p><p>“w” 以”写”的方式打开<br>“w+” 以“读写”模式打开<br>“wb” 以“二进制 写”模式打开<br>“wb+” 以“二进制 读写”模式打开</p><p>“r+” 以”读写”模式打开<br>“rb” 以”二进制 读”模式打开<br>“rb+” 以”二进制 读写”模式打开</p><p>rU 或 Ua 以”读”方式打开, 同时提供通用换行符支持 (PEP 278)</p><p>需注意：<br>1、使用“w”模式。文件若存在，首先要清空，然后重新创建<br>2、使用“a”模式。把所有要写入文件的数据都追加到文件的末尾，即使你使用了seek（）指向文件的其他地方，如果文件不存在，将自动被创建。</p><p>3、f.read([size]) ：size未指定则返回整个文件，如果文件大小&gt;2倍内存则有问题。f.read()读到文件尾时返回”“(空字串)<br>4、file.readline() 返回一行<br>5、file.readline([size]) 返回包含size行的列表,size 未指定则返回全部行<br>6、”for line in f: print line” #通过迭代器访问<br>7、f.write(“hello\n”) #如果要写入字符串以外的数据,先将他转换为字符串.<br>8、f.tell() 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).<br>9、f.seek(偏移量,[起始位置]) ： 用来移动文件指针<br>偏移量 : 单位“比特”,可正可负<br>起始位置 : 0 -文件头, 默认值; 1 -当前位置; 2 -文件尾<br>10、f.close() 关闭文件</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>OK！这就是本篇文章的内容了，欢迎关注<strong>禅墨云</strong>！</p><p>博客网站同步更新，网址：chanmoyun.gitee.io</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210127184252320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>HTTP&amp;HTTPS协议|2</title>
    <link href="https://chanmoyun.gitee.io/2021/01/24/Reptile-Learn/02.HTTP&amp;HTTPS%E5%8D%8F%E8%AE%AE/"/>
    <id>https://chanmoyun.gitee.io/2021/01/24/Reptile-Learn/02.HTTP&amp;HTTPS%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-01-23T16:00:00.000Z</published>
    <updated>2024-01-09T03:08:44.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="HTTP-HTTPS协议"><a href="#HTTP-HTTPS协议" class="headerlink" title="HTTP&amp;HTTPS协议"></a>HTTP&amp;HTTPS协议</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是<strong>禅墨！</strong></p>    <div id="aplayer-xvxvOpYQ" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1813568808" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>今天我们继续进行爬虫教程的第二篇文章，HTTP&amp;HTTPS协议！</p><p>HTTP&amp;HTTPS这两种超文本传输协议，大家或多或少都听说过，但是你真的了解他们吗？</p><p>你知道在网络爬虫中我们都怎么去运用吗？今天，我们就围绕这两种协议进行探究！</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p><strong>概念：</strong>服务器与客户端进行数据交互的一种形式。就比如人与人之间进行<strong>语言沟通</strong></p><h2 id="常用请求头信息"><a href="#常用请求头信息" class="headerlink" title="常用请求头信息"></a>常用请求头信息</h2><ul><li><p>**User-Agent :**当前请求载体的身份标识，包含设备，浏览器等信息</p></li><li><p><img src="https://img-blog.csdnimg.cn/20210124153549470.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>**Connection:**请求完毕后，是断开连接还是保持连接两种形式</p></li></ul><h2 id="常用响应头信息"><a href="#常用响应头信息" class="headerlink" title="常用响应头信息"></a>常用响应头信息</h2><ul><li><strong>Content-Type：</strong>服务器响应回客户端的数据类型</li><li><img src="https://img-blog.csdnimg.cn/20210124153606133.png#pic_center" alt="在这里插入图片描述"></li></ul><h2 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h2><ul><li>安全的超文本传输协议。数据进行过加密（证书密钥加密）</li></ul><h2 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h2><h4 id="对称密钥加密"><a href="#对称密钥加密" class="headerlink" title="对称密钥加密"></a>对称密钥加密</h4><p><img src="https://img-blog.csdnimg.cn/20210124153618605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>  客户端制定一种加密方式，对即将发送的数据进行加密，然后将加密过后的密文包括解密方式(密钥)传递给服务器，服务器用密钥进行对密文解密之后得到原文数据。</p><p><strong>弊端：</strong>密文密钥容易被第三方拦截，造成数据泄露</p><h4 id="非对称密钥加密"><a href="#非对称密钥加密" class="headerlink" title="非对称密钥加密"></a>非对称密钥加密</h4><p><img src="https://img-blog.csdnimg.cn/20210124153631956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>”私有密钥“和”公有密钥“</p><p>客户端按照服务器给定的公开密钥进行数据加密处理，然后将加密过后的密文发送给服务器，服务器接收到的密文再通过自己的私有密钥进行解密，最终得到原始数据。</p><p><strong>弊端：</strong>发送公开密钥的时候有被挟持的风险，处理效率较低，通讯过程中影响通讯速度</p><h4 id="证书密钥加密"><a href="#证书密钥加密" class="headerlink" title="证书密钥加密"></a>证书密钥加密</h4><p><img src="https://img-blog.csdnimg.cn/20210124153646482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>数字证书认证机构是客户端与服务器都可信赖的第三方机构</p><ul><li>服务器的开发者携带公开密钥，向数字证书认证机构提出公开密钥的申请，数字证书认证机构在认清申请者的身份，审核通过之后，会对开发者申请的公开密钥做数字签名，然后分配已签名的公开密钥，并将密钥放在证书里面，绑定子一起。</li><li>服务器将这份数字证书发送给客户端，因为客户端也认可证书机构，客户端可以通过数字证书中的数字签名来验证公钥的真伪，来确保服务器传过来的公开密钥是真实的。一般情况下，证书的数字签名是很难被伪造的，这取决于认证机构的公信力。一旦确认信息无误后，客户端就会通过公钥对数据进行加密发送，服务器接受以后用自己的私钥进行解密。</li></ul><p>这也是目前大多数在用的加密机制！</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>唉~~，疫情又开始肆虐了！</p><p>祝愿一切安好！疫情赶紧控制住！</p><p>钥进行解密。</p><p>这也是目前大多数在用的加密机制！</p><h2 id="写在后面-1"><a href="#写在后面-1" class="headerlink" title="写在后面"></a>写在后面</h2><p>唉~~，疫情又开始肆虐了！</p><p>祝愿一切安好！疫情赶紧控制住！</p><p>众志成城，共同抗疫，千万不要延迟开学啊……….</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>初探爬虫|1</title>
    <link href="https://chanmoyun.gitee.io/2021/01/23/Reptile-Learn/01.%E5%88%9D%E6%8E%A2%E7%88%AC%E8%99%AB/"/>
    <id>https://chanmoyun.gitee.io/2021/01/23/Reptile-Learn/01.%E5%88%9D%E6%8E%A2%E7%88%AC%E8%99%AB/</id>
    <published>2021-01-22T16:00:00.000Z</published>
    <updated>2024-01-09T03:08:35.265Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="初探爬虫"><a href="#初探爬虫" class="headerlink" title="初探爬虫"></a>初探爬虫</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>好久，没见！你好，我是<strong>禅墨</strong>！</p>    <div id="aplayer-HrsScdew" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1465313631" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>2020是不幸的一年，还好已经过去，现在是2021！这是一个新的教程系列，就叫做爬虫与局子吧，哈哈哈！更新周期呢，得看心情，毕竟现在也是在复习！</p><p>去年做了一个Python进阶系列，只发了第一阶段的学习文章，其实后面的几个阶段，也早就已经写好，只是由于种种原因没有来的及发，呃~~，好吧种种原因就是“懒”！后续我会依次上传的，</p><p>先来思考以下几个问题</p><p> 1.你是否在夜深人静的时候，想看一些会让你更加睡不着的图片…</p><p> 2.你是否在考试或者面试前夕，想看一些具有针对性的题目…</p><p> 3.你是否想在杂乱的网络世界中获取你想要的数据…</p><h2 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h2><p>通过编写程序，模拟浏览器上网，然后就让其去互联网上抓取数据的过程。<br> 重点：模拟浏览器 抓取(整体与局部)</p><h2 id="爬虫的价值"><a href="#爬虫的价值" class="headerlink" title="爬虫的价值"></a>爬虫的价值</h2><p>–懂得都懂</p><h2 id="爬虫合法性探究"><a href="#爬虫合法性探究" class="headerlink" title="爬虫合法性探究"></a>爬虫合法性探究</h2><h4 id="爬虫合法性探究-1"><a href="#爬虫合法性探究-1" class="headerlink" title="爬虫合法性探究"></a>爬虫合法性探究</h4><ul><li>-爬虫在法律中不被禁止</li><li>-具有违法放风险(公开性信息合理)，利用爬虫攻击后台窃取后台数据即为违法</li><li>-分为善意爬虫和恶意爬虫<br>爬虫带来的风险体现在以下两个方面：<br>1.爬虫干扰了被访问网站的正常运营<br>2.爬虫抓取了受到法律保护的特定类型的数据或信息</li><li>如何避免进局子厄运？<br>1.时常优化自己的程序，避免干扰被访问网站的正常运行<br>2.在使用中，传播爬取到的数据时，审查抓取的内容，如果发现了涉及到用户隐私商业机密等敏感内容需要及时停止爬取及传播</li></ul><h2 id="爬虫在使用场景中分类"><a href="#爬虫在使用场景中分类" class="headerlink" title="爬虫在使用场景中分类"></a>爬虫在使用场景中分类</h2><p><strong>1.通用爬虫：</strong><br>抓取系统重要组成部分。抓取的是译者肮脏页面数据‘<br><strong>2.聚焦爬虫：</strong><br>是建立在通用爬虫基础上，住区页面中特定的局部内容<br><strong>3.增量式爬虫</strong>：<br>检测网站中数据更新的情况。只会抓取网站中最新更新出来的数据</p><h2 id="反爬机制"><a href="#反爬机制" class="headerlink" title="反爬机制"></a>反爬机制</h2><p>门户网站，可以通过指定相应的策略或者技术手段，防止爬虫程序进行网站数据的爬取</p><h2 id="反反爬策略"><a href="#反反爬策略" class="headerlink" title="反反爬策略"></a>反反爬策略</h2><p>爬虫程序可以通过制定相关的策略或者技术手段，破解门户网站中具备的反爬虫机制，从而可以获取门户网站的数据</p><h2 id="robots-txt君子协议"><a href="#robots-txt君子协议" class="headerlink" title="robots.txt君子协议"></a>robots.txt君子协议</h2><p>规定了网站中哪些数据可以被爬虫爬取，哪些数据不可以被爬取。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://chanmoyun.gitee.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>考研&amp;就业，其实不难选！</title>
    <link href="https://chanmoyun.gitee.io/2020/08/01/Development/%E8%80%83%E7%A0%94&amp;%E5%B0%B1%E4%B8%9A%EF%BC%8C%E5%85%B6%E5%AE%9E%E4%B8%8D%E9%9A%BE%E9%80%89/"/>
    <id>https://chanmoyun.gitee.io/2020/08/01/Development/%E8%80%83%E7%A0%94&amp;%E5%B0%B1%E4%B8%9A%EF%BC%8C%E5%85%B6%E5%AE%9E%E4%B8%8D%E9%9A%BE%E9%80%89/</id>
    <published>2020-07-31T16:00:00.000Z</published>
    <updated>2024-01-09T03:07:52.831Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="考研-就业，其实不难选！"><a href="#考研-就业，其实不难选！" class="headerlink" title="考研&amp;就业，其实不难选！"></a>考研&amp;就业，其实不难选！</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是<strong>禅墨</strong>！</p>    <div id="aplayer-EEAcqSLL" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="440357778" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>之前对于这个问题，我经常这样回答：“考啊，肯定会去考啊，但是我如果第一年考不上的话，我不会再去用一年时间去备战”</p><p>现在不知不觉间大学时光就已经过去一半了，开学后我就是大三老学长了，然后就该准备考研的事情了，啊，时光好快好快！</p><p>再加上这次和两个研究生老学长出来，接触的也有一些名校毕业生，所以让我不得不重视起来这个问题，然后思考了很多，也查了很多，问了很多，写这篇文章第一就是做个细致的总结，第二是写给你知！</p><h2 id="考研香吗？"><a href="#考研香吗？" class="headerlink" title="考研香吗？"></a>考研香吗？</h2><p>我觉得这个标题取得不好，因为这是句废话！当然香啊。</p><p><strong>第一</strong>：目前大学生遍地都是，在就业方面的优势不太明显，甚至可以说是没有优势可言，甚至在之后的工作中升职，加薪，走上人生巅峰也没有研究生来的快，或者说是机会多更为合适。高学历确实是个很不错的敲门砖。</p><p><strong>第二</strong>：专业知识更为雄厚。在大学生期间，课程是比较多的，更多的是通识教育，所以能学到的真的很有限，当然这只是针对课程上，不排除像我这样的另类，因为兴趣走上了别的路。然而考研之后，会进行细分研究方向，讲究的专业性特别强，如果说大学学的东西在工作上基本用的不多，但是研究生的这种专业性就是一种很坚强的后盾。其实更重要的是，研究生分析问题以及解决问题的能力相对来说更有针对性，更具完整化。</p><p><strong>第三</strong>：资源财富。研究生期间，你会接触到更多的高知识人才，在你自己变得更优秀的同时，你身边的也会是一些优秀的人，“物以类聚，人以群分”不是没有道理的同时到时也会与一些企业来往密切，好好利用的话，这些都会成为你将来的资源。</p><p><strong>第四</strong>：换专业。说实话，有些专业前景不太好，当然我没有针对性，我只是针对就业来说，或者说是发现不是自己喜欢的专业，提不起一点兴趣，这个时候考研换专业也就是个很好的选择，虽然跨专业考研很难，但是不去努力一把怎么知道不行？</p><p>综上所述，考研能不香吗？</p><p>来说一个身边活生生 的例子：<strong>不透漏人名和公司。</strong>都是郑大毕业，一个研究生，一个本科生，都是搞计算机的，本科生工资拿到了6.8K，但是研究生工资却拿到了10K，这不是重点，研究生进的公司是华为旗下麒麟芯片的供货商，据说2021年将要上市，这是有多大的机遇啊。蚂蚁金服上市后，P8身价超亿，SO……</p><h2 id="选择？"><a href="#选择？" class="headerlink" title="选择？"></a>选择？</h2><p>说了那么多，考研和就业不过就是一个选择而已。</p><p>最近看到很多技术论坛，有些博主大咖在劝退考研党，但是吧我并不是特别赞同那些劝退的观点，我觉得还是要做些区分的，不同的人还是要根据自身的实际情况进行选择的。</p><p>1.二本或者三本。必须考研，这真的是转变的机会，具体走到那个地步，这个就只能看你自己的努力程度了。</p><p>2.双非考研党。如果本科学校是一个双非学校，对于大部分专业来说，还是去考研的好，双非学校的本科生出去工作，机会确实不大，当然轴承和液压专业除外啊。当然，考研还是要有选择的，本科是个双非，不乏有人都是因为高考的失利，但是吧，事实就是事实，既然不能改变，那就加倍努力，高考如果败过一次，考研就不能再失败一次，所以要么就不考，要么就奔着好的211或者985去，不然的话，其实用一年考研三年读研换了来的根本不值，也就是性价比不高，还不如去社会上多打拼打拼，积累经验！</p><p>3.211考研党。我感觉这个看学校吧，如果是特别强的211，很多专业如果考研兴趣不是特别强的话就可以直接就业，如果是普通的211建议还是考研冲一下，上个更好一点的顶尖院校。</p><p>4.985考研。这个我选择闭嘴……….</p><p>所以综上所述，不同的人，不同境地，不同选择。</p><h2 id="后述"><a href="#后述" class="headerlink" title="后述"></a>后述</h2><p>其实如果现在问我考研不，我会肯定地说：“考，并且是奔着好学校去，其他的不做考虑。”如果说第一年上岸失败的话，以前的我会绝对不会二战，觉得那是浪费青春的大好时光，现在的话我肯定会根据自己的程度进行斟酌选择的！</p><p>所以我个人是真的十分赞成考研的，因为现实教会我很多，也给了我考研的坚定信念！</p><p>有很多话，在心里想的很清楚，但是当我把他们打出来的时候，才发现表达并不清楚，终归自己文笔还是太烂了，这种文章也没怎么写过，但是我会努力进步的。</p><blockquote><p>我是<strong>禅墨</strong>，欢迎关注<strong>禅墨小栈</strong><br><img src="https://img-blog.csdnimg.cn/20200801233612103.gif#pic_center" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="成长进阶" scheme="https://chanmoyun.gitee.io/categories/%E6%88%90%E9%95%BF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="成长进阶" scheme="https://chanmoyun.gitee.io/tags/%E6%88%90%E9%95%BF%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>关于一些想让你知道的反思和现实！</title>
    <link href="https://chanmoyun.gitee.io/2020/07/30/Development/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%BA%9B%E6%83%B3%E8%AE%A9%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84%E5%8F%8D%E6%80%9D%E5%92%8C%E7%8E%B0%E5%AE%9E%EF%BC%81/"/>
    <id>https://chanmoyun.gitee.io/2020/07/30/Development/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%BA%9B%E6%83%B3%E8%AE%A9%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84%E5%8F%8D%E6%80%9D%E5%92%8C%E7%8E%B0%E5%AE%9E%EF%BC%81/</id>
    <published>2020-07-29T16:00:00.000Z</published>
    <updated>2024-01-09T03:07:44.826Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="关于一些想让你知道的反思和现实！"><a href="#关于一些想让你知道的反思和现实！" class="headerlink" title="关于一些想让你知道的反思和现实！"></a>关于一些想让你知道的反思和现实！</h1><h2 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h2><p>你好，我是禅墨！</p>    <div id="aplayer-XTjVFbjK" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1374051000" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>好久，不见！我消失了很长一段时间，先交代一下我去干嘛了：</p><ol><li>5.15-6.19呢，我们有考试，所有的考试，毕竟还是学生，然后还有两门课是有项目的，也有一定的难度，所以呢，就认真地去准备考试了。</li><li>6.20-7.3呢，考驾照，先是刷课时，我觉得我有必要吐槽一下 刷课时，所谓的刷课时就是在一个废弃厂子里转圈，一直转，没有加减速，没有红绿灯，就是单纯的转圈，消耗时间！然后真正的练车时间只有一周，我醉了啊！</li><li>7.8-至今，我在一个公司做实习生，公司挺大，在非标行业排进前五，还是挺厉害的，但是咱不讨论公司怎么样啊。等于说我把这个实习历程提前了两年。</li></ol><p>实习的这段时间，对我的冲击特别大，当然收获也是无与伦比的，我指的不是知识上的收获，而是从精神层面和眼界出发的，这也就是写下这篇文章的原因。</p><h2 id="后悔？"><a href="#后悔？" class="headerlink" title="后悔？"></a>后悔？</h2><p>我基本每学期都会问自己对这半年的选择后悔过吗？每年都会问自己对过去所做的后悔吗？</p><p>在没有经历这次的历练之前，我可能会直接回答，不会后悔！但是，今天再问，我犹豫了，然后思考了很久，“有遗憾，但是不后悔！”，这是我的答案！</p><p>为什么这样说呢？高中的最后一阶段，动力不足，不知道为啥，就是失去了那种感觉，所以我毫不意外地高考落败，然后选择了现在这个学校，<strong>河南科技大学</strong>，一个双非学校，其实我的分数可以让我有选择，但是由于我爷爷的癌症，让我在最后一天推掉了所以的省外学校，留在了河南！为什么不去河大？因为我更喜欢工科，河大在这方面有劣势。</p><p>我是和两个研究生一起过来的，其中一个是 从郑大调剂过来的，然后我们部门还有一个苏州大学的，然后从日常谈话中得知，原来，学校间差距是如此之大，我是曾设想过这个差距，但是还是没有料到，这个差距真的过于悬殊，甚至我在某个时候，是如此的自卑。我已经很努力地去做开拓自己眼界的事，去做提高自己能力的事，但是发现我们站在一个差距悬殊的平台，我竭尽全力去观望，看到的不过是人家平视的东西。我要比他们的付出多出至少一倍，我一直不相信阶级论，但是现实让我不得不去相信!</p><p>在他们的思想层面就超出了我们很多，这种东西无法表达，但是通过日常接触可以给你最直观的感受。还有就是生活条件，学习的资源，资源好且多，所有的生活条件很舒适，只为创造更好的学习环境。</p><p>所以我对自己过去很抱歉，但是为什么不后悔呢？</p><p>因为高考的失利确确实实对我影响很大，让我变得脚踏实地，变得很努力，让我学到了很多，现在的我比我大学前好千倍万倍，是那次让我第一次认识到长大，然后我也送走了爷爷。所以说有遗憾，不后悔！</p><p>还有就是，我很羡慕他们能接触到的资源以及他们所有的生活环境，但是有很大一部分人没有去好好利用，能够求知若渴地去利用资源的终归是少数，我虽然在这里，条件不如他们，但是我做到了小部分，所以这也是不会后悔，但有遗憾的原因！</p><h2 id="外面的世界很美好？"><a href="#外面的世界很美好？" class="headerlink" title="外面的世界很美好？"></a>外面的世界很美好？</h2><p>对，外面的世界十分美好。但是你得有欣赏这份美好的资本！</p><p>在学校的我们，总是幻想着毕业后的世界是多么的美好，尽管我已经考虑过社会的残酷，但是现实还是狠狠地打了我的脸。社会要远比我们想的残酷的多！</p><p>昆山，被称为最强县，七月平均房价为18821元&#x2F;平，我们这个厂周围房价为14500元&#x2F;平，厂子里的本科生工资为6.5k，211毕业的能拿8k，除去房租和日常生活开销能剩下四千块钱，连1&#x2F;3平的房子都买不到，现实就是来打工比当地市民都要多，工作两年，你会发现，除了年龄你还是一无所有！你要知道郑州的平均房价不过在13710元&#x2F;平而已，所以我也不想多说啥了。</p><p>还有一点，这些工厂都有和一些高校合作，他们会输入一些学生过来，组成生产线主力军，他们住的是十人间，虽说不会住满，每天从上午八点干到晚上九点，中间两个小时吃饭时间，基本全在干活，每个月只能拿到3.5k，没有双休！但是在这边的工厂里，这样的待遇还是比较高的了，关于这种合作，水太深！</p><p>我承认，外面的世界很美好，每天我们会看到朋友圈世界各地的美景，全是假期去哪个地方游玩，品尝哪些美食，感觉世界如此美好，有机会一定要去各地看看。但是你考虑过高昂的消费没有，一次说走就走的旅行需要多大的经济支撑，尤其是对普通孩子来说，这是父母用多少汗水换来的。对农村人来说每亩地，最高收成0.5吨粮食，除去交底，打药，上肥料，每亩地能赚不到1.3k。我本来不想说这些的，但是我确实忍不住！</p><p>毕竟能够外出好好游玩的只是少数人，大多数人还达不到那个经济水平。所以何冰老师说的“后浪”的生活条件，我并不认同，因为那代替不了大多数人！</p><p>外面的世界是真的很美好，但是我们得去拼搏，能够在这美好的世界中占有一席之地，有一定的资本，然后才能好好地欣赏这个世界。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>我从没写过这样的文章，这确实是我第一次写下这种类型地文章，原谅我不会讲故事，但是这确实是我的所思所想。希望对你有用！</p><p>下一篇我们聊聊考研和就业！</p><p>我是<strong>禅墨</strong>，欢迎关注微信公众号：<strong>禅墨小栈</strong></p><p>公众号进行了重新整改，以及官方认证，我仍保初心，不做任何商业用途，单纯分享技术，文章，以此交友！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="成长进阶" scheme="https://chanmoyun.gitee.io/categories/%E6%88%90%E9%95%BF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="成长进阶" scheme="https://chanmoyun.gitee.io/tags/%E6%88%90%E9%95%BF%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>03|数组：为什么很多编程语言中数组都从0开始编号？</title>
    <link href="https://chanmoyun.gitee.io/2020/07/28/Data-structure/03.%E6%95%B0%E7%BB%84%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%88%E5%A4%9A%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%95%B0%E7%BB%84%E9%83%BD%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%BC%96%E5%8F%B7%EF%BC%9F/"/>
    <id>https://chanmoyun.gitee.io/2020/07/28/Data-structure/03.%E6%95%B0%E7%BB%84%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%88%E5%A4%9A%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%95%B0%E7%BB%84%E9%83%BD%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%BC%96%E5%8F%B7%EF%BC%9F/</id>
    <published>2020-07-27T16:00:00.000Z</published>
    <updated>2024-01-09T03:07:10.467Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数组：为什么很多编程语言中数组都从0开始编号？"><a href="#数组：为什么很多编程语言中数组都从0开始编号？" class="headerlink" title="数组：为什么很多编程语言中数组都从0开始编号？"></a>数组：为什么很多编程语言中数组都从0开始编号？</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是<strong>禅墨</strong>！</p>    <div id="aplayer-YMhfVPDB" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1372796676" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>提到数组，我想你肯定不陌生，甚至还会自信地说，它很简单啊。</p><p>是的，在每一种编程语言中，基本都会有数组这种数据类型。不过，它不仅仅是一种编程语言中的数据类型，还是一种最基础的数据结构。尽管数组看起来非常基础、简单，但是我估计很多人都并没有理解这个基础数据结构的精髓。</p><p>在大部分编程语言中，数组都是从 0 开始编号的，但你是否下意识地想过，<strong>为什么数组要从 0 开始编号，而不是从 1 开始呢？</strong> 从 1 开始不是更符合人类的思维习惯吗？</p><p>你可以带着这个问题来学习接下来的内容。如何实现随机访问？</p><h2 id="如何实现随机访问？"><a href="#如何实现随机访问？" class="headerlink" title="如何实现随机访问？"></a>如何实现随机访问？</h2><p>什么是数组？我估计你心中已经有了答案。不过，我还是想用专业的话来给你做下解释。<strong>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</strong></p><p>这个定义里有几个关键词，理解了这几个关键词，我想你就能彻底掌握数组的概念了。下面就从我的角度分别给你“点拨”一下</p><p>第一是<strong>线性表</strong>（Linear List）。顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。</p><p><img src="https://img-blog.csdnimg.cn/20200728113321659.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>而与它相对立的概念是<strong>非线性表</strong>，比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。</p><p><img src="https://img-blog.csdnimg.cn/20200728113425340.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>第二个是<strong>连续的内存空间和相同类型的数据。</strong>正是因为这两个限制，它才有了一个堪称“杀手锏”的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p><p>说到数据的访问，那你知道数组是如何实现根据下标随机访问数组元素的吗？</p><p>我们拿一个长度为 10 的 int 类型的数组 int[] a &#x3D; new int[10]来举例。在我画的这个图中，计算机给数组 a[10]，分配了一块连续内存空间 1000～1039，其中，内存块的首地址为 base_address &#x3D; 1000。</p><p><img src="https://img-blog.csdnimg.cn/20200728113441235.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>我们知道，计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：</p><blockquote><p>a[i]_address &#x3D; base_address + i * data_type_size</p></blockquote><p>其中 data_type_size 表示数组中每个元素的大小。我们举的这个例子里，数组中存储的是 int 类型数据，所以 data_type_size 就为 4 个字节。这个公式非常简单，我就不多做解释了。</p><p>这里我要特别纠正一个“错误”。我在面试的时候，常常会问数组和链表的区别，很多人都回答说，“链表适合插入、删除，时间复杂度 O(1)；数组适合查找，查找时间复杂度为 O(1)”。</p><p>实际上，这种表述是不准确的。数组是适合查找操作，但是查找的时间复杂度并不为 O(1)。即便是排好序的数组，你用二分查找，时间复杂度也是 O(logn)。所以，正确的表述应该是，数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。</p><h2 id="低效的“插入”和“删除”"><a href="#低效的“插入”和“删除”" class="headerlink" title="低效的“插入”和“删除”"></a>低效的“插入”和“删除”</h2><p>前面概念部分我们提到，数组为了保持内存数据的连续性，会导致插入、删除这两个操作比较低效。现在我们就来详细说一下，究竟为什么会导致低效？又有哪些改进方法呢？</p><p>我们先来看<strong>插入操作</strong>。</p><p>假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。那插入操作的时间复杂度是多少呢？你可以自己先试着分析一下。</p><p>如果在数组的末尾插入元素，那就不需要移动数据了，这时的时间复杂度为 O(1)。但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度是 O(n)。 因为我们在每个位置插入元素的概率是一样的，所以平均情况时间复杂度为 (1+2+…n)&#x2F;n&#x3D;O(n)。</p><p>如果数组中的数据是有序的，我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数据插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。</p><p>为了更好地理解，我们举一个例子。假设数组 a[10]中存储了如下 5 个元素：a，b，c，d，e。</p><p>我们现在需要将元素 x 插入到第 3 个位置。我们只需要将 c 放入到 a[5]，将 a[2]赋值为 x 即可。最后，数组中的元素如下： a，b，x，d，e，c。</p><p><img src="https://img-blog.csdnimg.cn/20200728113504191.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>利用这种处理技巧，在特定场景下，在第 k 个位置插入一个元素的时间复杂度就会降为 O(1)。这个处理思想在快排中也会用到，我会在排序那一节具体来讲，这里就说到这儿。</p><p>我们再来看删除操作。</p><p>跟插入数据类似，如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。</p><p>和插入类似，如果删除数组末尾的数据，则最好情况时间复杂度为 O(1)；如果删除开头的数据，则最坏情况时间复杂度为 O(n)；平均情况时间复杂度也为 O(n)。</p><p>实际上，在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？</p><p>我们继续来看例子。数组 a[10]中存储了 8 个元素：a，b，c，d，e，f，g，h。现在，我们要依次删除 a，b，c 三个元素。</p><p><img src="https://img-blog.csdnimg.cn/20200728113522991.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p><p>如果你了解 JVM，你会发现，这不就是 JVM 标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<strong>很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧</strong>，这些东西才是最有价值的。如果你细心留意，不管是在软件开发还是架构设计中，总能找到某些算法和数据结构的影子。警惕数组的访问越界问题</p><h2 id="警惕数组的访问越界问题"><a href="#警惕数组的访问越界问题" class="headerlink" title="警惕数组的访问越界问题"></a>警惕数组的访问越界问题</h2><p>了解了数组的几个基本操作后，我们来聊聊数组访问越界的问题。</p><p>首先，我请你来分析一下这段 C 语言代码的运行结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(; i&lt;=<span class="number">3</span>; i++)&#123;</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你发现问题了吗？这段代码的运行结果并非是打印三行“hello word”，而是会无限打印“hello world”，这是为什么呢？</p><p>因为，数组大小为 3，a[0]，a[1]，a[2]，而我们的代码因为书写错误，导致 for 循环的结束条件错写为了 i&lt;&#x3D;3 而非 i&lt;3，所以当 i&#x3D;3 时，数组 a[3]访问越界。</p><p>我们知道，在 C 语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。根据我们前面讲的数组寻址公式，a[3]也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]&#x3D;0 就相当于 i&#x3D;0，所以就会导致代码无限循环。</p><p>数组越界在 C 语言中是一种未决行为，并没有规定数组访问越界时编译器应该如何处理。因为，访问数组的本质就是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，那么程序就可能不会报任何错误。</p><p>这种情况下，一般都会出现莫名其妙的逻辑错误，就像我们刚刚举的那个例子，debug 的难度非常的大。而且，很多计算机病毒也正是利用到了代码中的数组越界可以访问非法地址的漏洞，来攻击系统，所以写代码的时候一定要警惕数组越界。</p><p>但并非所有的语言都像 C 一样，把数组越界检查的工作丢给程序员来做，像 Java 本身就会做越界检查，比如下面这几行 Java 代码，就会抛出 java.lang.ArrayIndexOutOfBoundsException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">3</span>] = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="容器能否完全替代数组？"><a href="#容器能否完全替代数组？" class="headerlink" title="容器能否完全替代数组？"></a>容器能否完全替代数组？</h2><p>针对数组类型，很多语言都提供了容器类，比如 Java 中的 ArrayList、C++ STL 中的 vector。在项目开发中，什么时候适合用数组，什么时候适合用容器呢？</p><p>这里我拿 Java 语言来举例。如果你是 Java 工程师，几乎天天都在用 ArrayList，对它应该非常熟悉。那它与数组相比，到底有哪些优势呢？</p><p>我个人觉得，ArrayList 最大的优势就是<strong>可以将很多数组操作的细节封装起来</strong>。比如前面提到的数组插入、删除数据时需要搬移其他数据等。另外，它还有一个优势，就是<strong>支持动态扩容</strong>。</p><p>数组本身在定义的时候需要预先指定大小，因为需要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入。</p><p>如果使用 ArrayList，我们就完全不需要关心底层的扩容逻辑，ArrayList 已经帮我们实现好了。每次存储空间不够的时候，它都会将空间自动扩容为 1.5 倍大小。</p><p>不过，这里需要注意一点，因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好在创建 ArrayList 的时候事先指定数据大小。</p><p>比如我们要从数据库中取出 10000 条数据放入 ArrayList。我们看下面这几行代码，你会发现，相比之下，事先指定数据大小可以省掉很多次内存申请和数据搬移操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ArrayList&lt;User&gt; users = new ArrayList(<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</span><br><span class="line">  users.add(xxx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有些时候，用数组会更合适些，我总结了几点自己的经验。</p><p>1.Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。</p><p>2.如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。</p><p>3.还有一个是我个人的喜好，当要表示多维数组时，用数组往往会更加直观。比如 Object[][] array；而用容器的话则需要这样定义：ArrayList &gt; array。</p><p>我总结一下，对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</p><h2 id="解答开篇"><a href="#解答开篇" class="headerlink" title="解答开篇"></a>解答开篇</h2><p>现在我们来思考开篇的问题：为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？</p><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。前面也讲到，如果用 a 来表示数组的首地址，a[0]就是偏移为 0 的位置，也就是首地址，a[k]就表示偏移 k 个 type_size 的位置，所以计算 a[k]的内存地址只需要用这个公式：</p><blockquote><p>a[k]_address &#x3D; base_address + k * type_size</p></blockquote><p>但是，如果数组从 1 开始计数，那我们计算数组元素 a[k]的内存地址就会变为：</p><blockquote><p>a[k]_address &#x3D; base_address + (k-1)*type_size</p></blockquote><p>对比两个公式，我们不难发现，从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。</p><p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。</p><p>不过我认为，上面解释得再多其实都算不上压倒性的证明，说数组起始编号非 0 开始不可。所以我觉得最主要的原因可能是历史原因。</p><p>C 语言设计者用 0 开始计数数组下标，之后的 Java、JavaScript 等高级语言都效仿了 C 语言，或者说，为了在一定程度上减少 C 语言程序员学习 Java 的学习成本，因此继续沿用了从 0 开始计数的习惯。实际上，很多语言中数组也并不是从 0 开始计数的，比如 Matlab。甚至还有一些语言支持负数下标，比如 Python。</p><h2 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h2><p>我们今天学习了数组。它可以说是最基础、最简单的数据结构了。数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为 O(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。</p><h2 id="课后思考"><a href="#课后思考" class="headerlink" title="课后思考"></a>课后思考</h2><p>1.前面我基于数组的原理引出 JVM 的标记清除垃圾回收算法的核心理念。我不知道你是否使用 Java 语言，理解 JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。</p><p>情况时间复杂度为 O(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。</p><h2 id="课后思考-1"><a href="#课后思考-1" class="headerlink" title="课后思考"></a>课后思考</h2><p>1.前面我基于数组的原理引出 JVM 的标记清除垃圾回收算法的核心理念。我不知道你是否使用 Java 语言，理解 JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。</p><p>2.前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？</p><blockquote><p>我是<strong>禅墨</strong> ，欢迎关注 <strong>微信公众号：禅墨小栈</strong><br><img src="https://img-blog.csdnimg.cn/20200728113708773.gif#pic_center" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="https://chanmoyun.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构与算法" scheme="https://chanmoyun.gitee.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://chanmoyun.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度</title>
    <link href="https://chanmoyun.gitee.io/2020/07/27/Data-structure/02.%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E6%B5%85%E6%9E%90%E6%9C%80%E5%A5%BD%E3%80%81%E6%9C%80%E5%9D%8F%E3%80%81%E5%B9%B3%E5%9D%87%E3%80%81%E5%9D%87%E6%91%8A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://chanmoyun.gitee.io/2020/07/27/Data-structure/02.%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E6%B5%85%E6%9E%90%E6%9C%80%E5%A5%BD%E3%80%81%E6%9C%80%E5%9D%8F%E3%80%81%E5%B9%B3%E5%9D%87%E3%80%81%E5%9D%87%E6%91%8A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</id>
    <published>2020-07-26T16:00:00.000Z</published>
    <updated>2024-01-09T03:06:43.339Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度"><a href="#复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度" class="headerlink" title="复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度"></a>复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是<strong>禅墨</strong>！</p>    <div id="aplayer-FctsdyXz" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1374061038" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>上一节，我们讲了复杂度的大 O 表示法和几个分析技巧，还举了一些常见复杂度分析的例子，比如 O(1)、O(logn)、O(n)、O(nlogn) 复杂度分析。掌握了这些内容，对于复杂度分析这个知识点，你已经可以到及格线了。但是，我想你肯定不会满足于此。</p><p>今天我会继续给你讲四个复杂度分析方面的知识点，<strong>最好情况时间复杂度（best case time complexity）、最坏情况时间复杂度（worst case time complexity）、平均情况时间复杂度（average case time complexity）、均摊时间复杂度（amortized time complexity）</strong>。如果这几个概念你都能掌握，那对你来说，复杂度分析这部分内容就没什么大问题了。</p><h2 id="最好、最坏情况时间复杂度"><a href="#最好、最坏情况时间复杂度" class="headerlink" title="最好、最坏情况时间复杂度"></a>最好、最坏情况时间复杂度</h2><p>上一节我举的分析复杂度的例子都很简单，今天我们来看一个稍微复杂的。你可以用我上节教你的分析技巧，自己先试着分析一下这段代码的时间复杂度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// n表示数组array的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] <span class="built_in">array</span>, <span class="type">int</span> n, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span>[i] == x) pos = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你应该可以看出来，这段代码要实现的功能是，在一个无序的数组（array）中，查找变量 x 出现的位置。如果没有找到，就返回 -1。按照上节课讲的分析方法，这段代码的复杂度是 O(n)，其中，n 代表数组的长度。</p><p>我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，因为有可能中途找到就可以提前结束循环了。但是，这段代码写得不够高效。我们可以这样优化一下这段查找代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// n表示数组array的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] <span class="built_in">array</span>, <span class="type">int</span> n, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span>[i] == x) &#123;</span><br><span class="line">       pos = i;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，问题就来了。我们优化完之后，这段代码的时间复杂度还是 O(n) 吗？很显然，咱们上一节讲的分析方法，解决不了这个问题。</p><p>因为，要查找的变量 x 可能出现在数组的任意位置。如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。所以，不同的情况下，这段代码的时间复杂度是不一样的。</p><p>为了表示代码在不同情况下的不同时间复杂度，我们需要引入三个概念：最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度。</p><p>顾名思义，<strong>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度</strong>。就像我们刚刚讲到的，在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，这个时候对应的时间复杂度就是最好情况时间复杂度。</p><p>同理，<strong>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度</strong>。就像刚举的那个例子，如果数组中没有要查找的变量 x，我们需要把整个数组都遍历一遍才行，所以这种最糟糕情况下对应的时间复杂度就是最坏情况时间复杂度。</p><h2 id="平均情况时间复杂度"><a href="#平均情况时间复杂度" class="headerlink" title="平均情况时间复杂度"></a>平均情况时间复杂度</h2><p>我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率其实并不大。为了更好地表示平均情况下的复杂度，我们需要引入另一个概念：</p><p>平均情况时间复杂度，后面我简称为平均时间复杂度。平均时间复杂度又该怎么分析呢？我还是借助刚才查找变量 x 的例子来给你解释。</p><p>要查找的变量 x 在数组中的位置，有 n+1 种情况：<strong>在数组的 0～n-1 位置中和不在数组中。</strong>我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：</p><p><img src="https://img-blog.csdnimg.cn/20200727080836743.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>我们知道，时间复杂度的大 O 标记法中，可以省略掉系数、低阶、常量，所以，咱们把刚刚这个公式简化之后，得到的平均时间复杂度就是 O(n)。</p><p>这个结论虽然是正确的，但是计算过程稍微有点儿问题。究竟是什么问题呢？我们刚讲的这 n+1 种情况，出现的概率并不是一样的。我带你具体分析一下。（这里要稍微用到一点儿概率论的知识，不过非常简单，你不用担心。）</p><p>我们知道，要查找的变量 x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为 1&#x2F;2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1&#x2F;n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1&#x2F;(2n)。</p><p>因此，前面的推导过程中存在的最大问题就是，没有将各种情况发生的概率考虑进去。如果我们把每种情况发生的概率也考虑进去，那平均时间复杂度的计算过程就变成了这样：</p><p><img src="https://img-blog.csdnimg.cn/20200727080850601.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这个值就是概率论中的<strong>加权平均值，也叫作期望值，</strong>所以平均时间复杂度的全称应该叫<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</p><p>引入概率之后，前面那段代码的加权平均值为 (3n+1)&#x2F;4。用大 O 表示法来表示，去掉系数和常量，这段代码的加权平均时间复杂度仍然是 O(n)。</p><p>你可能会说，平均时间复杂度分析好复杂啊，还要涉及概率论的知识。实际上，在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。像我们上一节课举的那些例子那样，很多时候，我们使用一个复杂度就可以满足需求了。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p><h2 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h2><p>到此为止，你应该已经掌握了算法复杂度分析的大部分内容了。下面我要给你讲一个更加高级的概念，均摊时间复杂度，以及它对应的分析方法，摊还分析（或者叫平摊分析）。</p><p>均摊时间复杂度，听起来跟平均时间复杂度有点儿像。对于初学者来说，这两个概念确实非常容易弄混。我前面说了，大部分情况下，我们并不需要区分最好、最坏、平均三种复杂度。平均复杂度只在某些特殊情况下才会用到，而均摊时间复杂度应用的场景比它更加特殊、更加有限。</p><p>老规矩，我还是借助一个具体的例子来帮助你理解。（当然，这个例子只是我为了方便讲解想出来的，实际上没人会这么写。）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// array表示一个长度为n的数组</span></span><br><span class="line"><span class="comment">// 代码中的array.length就等于n</span></span><br><span class="line"><span class="type">int</span>[] <span class="built_in">array</span> = new <span class="type">int</span>[n];</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (count == <span class="built_in">array</span>.length) &#123;</span><br><span class="line">      <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.length; ++i) &#123;</span><br><span class="line">         sum = sum + <span class="built_in">array</span>[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">array</span>[<span class="number">0</span>] = sum;</span><br><span class="line">      count = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">array</span>[count] = val;</span><br><span class="line">   ++count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我先来解释一下这段代码。这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count &#x3D;&#x3D; array.length 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p><p>那这段代码的时间复杂度是多少呢？你可以先用我们刚讲到的三种时间复杂度的分析方法来分析一下。</p><p>最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为 count 的位置就可以了，所以最好情况时间复杂度为 O(1)。最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</p><p>那平均时间复杂度是多少呢？答案是 O(1)。我们还是可以通过前面讲的概率论的方法来分析。</p><p>假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率一样，都是 1&#x2F;(n+1)。所以，根据加权平均的计算方法，我们求得的平均时间复杂度就是：</p><p><img src="https://img-blog.csdnimg.cn/20200727080911742.jpg#pic_center" alt="在这里插入图片描述"></p><p>至此为止，前面的最好、最坏、平均时间复杂度的计算，理解起来应该都没有问题。但是这个例子里的平均复杂度分析其实并不需要这么复杂，不需要引入概率论的知识。这是为什么呢？我们先来对比一下这个 insert() 的例子和前面那个 find() 的例子，你就会发现这两者有很大差别。</p><p>首先，find() 函数在极端情况下，复杂度才为 O(1)。但 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert()<strong>第一个</strong>区别于 find() 的地方。</p><p>我们再来看<strong>第二个</strong>不同的地方。对于 insert() 函数来说，O(1) 时间复杂度的插入和 O(n) 时间复杂度的插入，出现的频率是非常有规律的，而且有一定的前后时序关系，一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。</p><p>所以，针对这样一种特殊场景的复杂度分析，我们并不需要像之前讲平均复杂度分析方法那样，找出所有的输入情况及相应的发生概率，然后再计算加权平均值。</p><p>针对这种特殊的场景，我们引入了一种更加简单的分析方法：<strong>摊还分析法</strong>，通过摊还分析得到的时间复杂度我们起了一个名字，叫<strong>均摊时间复杂度</strong>。</p><p>那究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p><p>我们还是继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。你都理解了吗？</p><p>均摊时间复杂度和摊还分析应用场景比较特殊，所以我们并不会经常用到。为了方便你理解、记忆，我这里简单总结一下它们的应用场景。如果你遇到了，知道是怎么回事儿就行了。</p><p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。</p><p>尽管很多数据结构和算法书籍都花了很大力气来区分平均时间复杂度和均摊时间复杂度，但其实我个人认为，<strong>均摊时间复杂度就是一种特殊的平均时间复杂度</strong>，我们没必要花太多精力去区分它们。你最应该掌握的是它的分析方法，摊还分析。至于分析出来的结果是叫平均还是叫均摊，这只是个说法，并不重要。</p><h2 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h2><p>今天我们学习了几个复杂度分析相关的概念，分别有：最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度。之所以引入这几个复杂度概念，是因为，同一段代码，在不同输入的情况下，复杂度量级有可能是不一样的。</p><p>在引入这几个概念之后，我们可以更加全面地表示一段代码的执行效率。而且，这几个概念理解起来都不难。最好、最坏情况下的时间复杂度分析起来比较简单，但平均、均摊两个复杂度分析相对比较复杂。如果你觉得理解得还不是很深入，不用担心，在后续具体的数据结构和算法学习中，我们可以继续慢慢实践！</p><h2 id="课后思考"><a href="#课后思考" class="headerlink" title="课后思考"></a>课后思考</h2><p>我们今天学的几个复杂度分析方法，你都掌握了吗？你可以用今天学习的知识，来分析一下下面这个 add() 函数的时间复杂度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 全局变量，大小为10的数组array，长度len，下标i。</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[] = new <span class="type">int</span>[<span class="number">10</span>]; </span><br><span class="line"><span class="type">int</span> len = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往数组中添加一个元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> element)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (i &gt;= len) &#123; <span class="comment">// 数组空间不够了</span></span><br><span class="line">     <span class="comment">// 重新申请一个2倍大小的数组空间</span></span><br><span class="line">     <span class="type">int</span> new_array[] = new <span class="type">int</span>[len*<span class="number">2</span>];</span><br><span class="line">     <span class="comment">// 把原来array数组中的数据依次copy到new_array</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; ++j) &#123;</span><br><span class="line">       new_array[j] = <span class="built_in">array</span>[j];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// new_array复制给array，array现在大小就是2倍len了</span></span><br><span class="line">     <span class="built_in">array</span> = new_array;</span><br><span class="line">     len = <span class="number">2</span> * len;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 将element放到下标为i的位置，下标i加一</span></span><br><span class="line">   <span class="built_in">array</span>[i] = element;</span><br><span class="line">   ++i;</span><br><span class="line">&#125;</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// new_array复制给array，array现在大小就是2倍len了</span></span><br><span class="line">     <span class="built_in">array</span> = new_array;</span><br><span class="line">     len = <span class="number">2</span> * len;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 将element放到下标为i的位置，下标i加一</span></span><br><span class="line">   <span class="built_in">array</span>[i] = element;</span><br><span class="line">   ++i;</span><br><span class="line">&#125;</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我是禅墨，欢迎关注微信公众号：</p><blockquote><p>这里是引用<br><img src="https://img-blog.csdnimg.cn/20200725180147220.gif#pic_center" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="https://chanmoyun.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构与算法" scheme="https://chanmoyun.gitee.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://chanmoyun.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？</title>
    <link href="https://chanmoyun.gitee.io/2020/07/25/Data-structure/01.%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E3%80%81%E7%BB%9F%E8%AE%A1%E7%AE%97%E6%B3%95%E7%9A%84%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87%E5%92%8C%E8%B5%84%E6%BA%90%E6%B6%88%E8%80%97%EF%BC%9F/"/>
    <id>https://chanmoyun.gitee.io/2020/07/25/Data-structure/01.%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E3%80%81%E7%BB%9F%E8%AE%A1%E7%AE%97%E6%B3%95%E7%9A%84%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87%E5%92%8C%E8%B5%84%E6%BA%90%E6%B6%88%E8%80%97%EF%BC%9F/</id>
    <published>2020-07-24T16:00:00.000Z</published>
    <updated>2024-01-09T03:06:36.223Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？"><a href="#复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？" class="headerlink" title="复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？"></a>复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是<strong>禅墨</strong>！</p>    <div id="aplayer-aghulSZd" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="29567192" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。所以，执行效率是算法一个非常重要的考量指标。那如何来衡量你编写的算法代码的执行效率呢？这里就要用到我们今天要讲的内容：时间、空间复杂度分析。</p><p>其实，只要讲到数据结构与算法，就一定离不开时间、空间复杂度分析。而且，我个人认为，<strong>复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半</strong>。</p><p>复杂度分析实在太重要了，希望在学完这个内容之后，无论在任何场景下，面对任何代码的复杂度分析，都能做到“庖丁解牛”般游刃有余。</p><h2 id="为什么需要复杂度分析？"><a href="#为什么需要复杂度分析？" class="headerlink" title="为什么需要复杂度分析？"></a>为什么需要复杂度分析？</h2><p>你可能会有些疑惑，我把代码跑一遍，通过统计、监控，就能得到算法执行的时间和占用的内存大小。为什么还要做时间、空间复杂度分析呢？这种分析方法能比我实实在在跑一遍得到的数据更准确吗？</p><p>首先，我可以肯定地说，你这种评估算法执行效率的方法是正确的。很多数据结构和算法书籍还给这种方法起了一个名字，叫事后统计法。但是，这种统计方法有非常大的局限性。</p><h3 id="1-测试结果非常依赖测试环境"><a href="#1-测试结果非常依赖测试环境" class="headerlink" title="1. 测试结果非常依赖测试环境"></a>1. 测试结果非常依赖测试环境</h3><p>测试环境中硬件的不同会对测试结果有很大的影响。比如，我们拿同样一段代码，分别用 Intel Core i9 处理器和 Intel Core i3 处理器来运行，不用说，i9 处理器要比 i3 处理器执行的速度快很多。还有，比如原本在这台机器上 a 代码执行的速度比 b 代码要快，等我们换到另一台机器上时，可能会有截然相反的结果。</p><h3 id="2-测试结果受数据规模的影响很大"><a href="#2-测试结果受数据规模的影响很大" class="headerlink" title="2. 测试结果受数据规模的影响很大"></a>2. 测试结果受数据规模的影响很大</h3><p>后面我们会讲排序算法，我们先拿它举个例子。对同一个排序算法，待排序数据的有序度不一样，排序的执行时间就会有很大的差别。极端情况下，如果数据已经是有序的，那排序算法不需要做任何操作，执行时间就会非常短。除此之外，如果测试数据规模太小，测试结果可能无法真实地反应算法的性能。比如，对于小规模的数据排序，插入排序可能反倒会比快速排序要快！</p><p>所以，<strong>我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法</strong>。这就是我们今天要讲的时间、空间复杂度分析方法。</p><h2 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h2><p>算法的执行效率，粗略地讲，就是算法代码执行的时间。但是，如何在不运行代码的情况下，用“肉眼”得到一段代码的执行时间呢？这里有段非常简单的代码，求 1,2,3…n 的累加和。现在，我就带你一块来估算一下这段代码的执行时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：读数据-运算-写数据。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行c的时间都一样，为 unit_time。在这个假设的基础之上，这段代码的总执行时间是多少呢？</p><p>第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2n*unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)*unit_time。可以看出来，所有代码的执行时间 T(n) 与每行代码的执行次数成正比。</p><p>按照这个分析思路，我们再来看这段代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class="line">      sum = sum +  i * j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们依旧假设每个语句的c执行时间是 unit_time。那这段代码的总执行时间 T(n) 是多少呢？</p><p>第 2、3、4 行代码，每行都需要 1 个 unit_time 的执行时间，第 5、6 行代码循环执行了 n 遍，需要 2n * unit_time 的执行时间，第 7、8 行代码循环执行了 n2遍，所以需要 2n2* unit_time 的执行时间。所以，整段代码总的执行时间 T(n) &#x3D; (2n2+2n+3)*unit_time。</p><p>尽管我们不知道 unit_time 的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，<strong>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比。</strong></p><p>我们可以把这个规律总结成一个公式。注意，大 O 就要登场了！</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-MgrbdFbF-1595671071328)(D:%5CMyHexoBlogs%5CMD%E8%8D%89%E7%A8%BF%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%5Cimg%5C3%201.png)]</p><p>我来具体解释一下这个公式。其中，T(n) 我们已经讲过了，它表示代码执行的时间；n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。因为这是一个公式，所以用 f(n) 来表示。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。</p><p>所以，第一个例子中的 T(n) &#x3D; O(2n+2)，第二个例子中的 T(n) &#x3D; O(2n2+2n+3)。这就是<strong>大 O 时间复杂度表示法</strong>。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是<strong>表示代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。</p><p>当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) &#x3D; O(n)； T(n) &#x3D; O(n2)。</p><h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>前面介绍了大 O 时间复杂度的由来和表示方法。现在我们来看下，如何分析一段代码的时间复杂度？我这儿有三个比较实用的方法可以分享给你。</p><h3 id="1-只关注循环执行次数最多的一段代码"><a href="#1-只关注循环执行次数最多的一段代码" class="headerlink" title="1.只关注循环执行次数最多的一段代码"></a>1.只关注循环执行次数最多的一段代码</h3><p>我刚才说了，大 O 这种复杂度表示方法只是表示一种变化趋势。我们通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。所以，<strong>我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了</strong>。这段核心代码执行次数的 n 的量级，就是整段要分析代码的时间复杂度。</p><p>为了便于你理解，我还拿前面的例子来说明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中第 2、3 行代码都是常量级的执行时间，与 n 的大小无关，所以对于复杂度并没有影响。循环执行次数最多的是第 4、5 行代码，所以这块代码要重点分析。前面我们也讲过，这两行代码被执行了 n 次，所以总的时间复杂度就是 O(n)。</p><h3 id="2-加法法则：总复杂度等于量级最大的那段代码的复杂度"><a href="#2-加法法则：总复杂度等于量级最大的那段代码的复杂度" class="headerlink" title="2.加法法则：总复杂度等于量级最大的那段代码的复杂度"></a>2.加法法则：总复杂度等于量级最大的那段代码的复杂度</h3><p>我这里还有一段代码。你可以先试着分析一下，然后再往下看跟我的分析思路是否一样。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">   <span class="type">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; p &lt; <span class="number">100</span>; ++p) &#123;c</span><br><span class="line">     sum_1 = sum_1 + p;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> q = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; q &lt; n; ++q) &#123;</span><br><span class="line">     sum_2 = sum_2 + q;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="type">int</span> sum_3 = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">     j = <span class="number">1</span>; </span><br><span class="line">     <span class="keyword">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class="line">       sum_3 = sum_3 +  i * j;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> sum_1 + sum_2 + sum_3;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这个代码分为三部分，分别是求 sum_1、sum_2、sum_3。我们可以分别分析每一部分的时间复杂度，然后把它们放到一块儿，再取一个量级最大的作为整段代码的复杂度。</p><p>第一段的时间复杂度是多少呢？这段代码循环执行了 100 次，所以是一个常量的执行时间，跟 n 的规模无关。</p><p>这里我要再强调一下，即便这段代码循环 10000 次、100000 次，只要是一个已知的数，跟 n 无关，照样也是常量级的执行时间。当 n 无限大的时候，就可以忽略。尽管对代码的执行时间会有很大影响，但是回到时间复杂度的概念来说，它表示的是一个算法执行效率与数据规模增长的变化趋势，所以不管常量的执行时间多大，我们都可以忽略掉。因为它本身对增长趋势并没有影响。</p><p>那第二段代码和第三段代码的时间复杂度是多少呢？答案是 O(n) 和 O(n2)，你应该能容易就分析出来，我就不啰嗦了。</p><p>综合这三段代码的时间复杂度，我们取其中最大的量级。所以，整段代码的时间复杂度就为 O(n2)。也就是说：<strong>总的时间复杂度就等于量级最大的那段代码的时间复杂度</strong>。那我们将这个规律抽象成公式就是：</p><p>如果 T1(n)&#x3D;O(f(n))，T2(n)&#x3D;O(g(n))；那么 T(n)&#x3D;T1(n)+T2(n)&#x3D;max(O(f(n)), O(g(n))) &#x3D;O(max(f(n), g(n))).</p><h3 id="3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"><a href="#3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积" class="headerlink" title="3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"></a>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</h3><p>我刚讲了一个复杂度分析中的加法法则，这儿还有一个乘法法则。类比一下，你应该能“猜到”公式是什么样子的吧？</p><p>如果 T1(n)&#x3D;O(f(n))，T2(n)&#x3D;O(g(n))；那么 T(n)&#x3D;T1(n)*T2(n)&#x3D;O(f(n))*O(g(n))&#x3D;O(f(n)*g(n)).</p><p>也就是说，假设 T1(n) &#x3D; O(n)，T2(n) &#x3D; O(n2)，则 T1(n) * T2(n) &#x3D; O(n3)。落实到具体的代码上，我们可以把乘法法则看成是嵌套循环，我举个例子给你解释一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">   <span class="type">int</span> ret = <span class="number">0</span>; </span><br><span class="line">   <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">     ret = ret + f(i);</span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们单独看 cal() 函数。假设 f() 只是一个普通的操作，那第 4～6 行的时间复杂度就是，T1(n) &#x3D; O(n)。但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) &#x3D; O(n)，所以，整个 cal() 函数的时间复杂度就是，T(n) &#x3D; T1(n) * T2(n) &#x3D; O(n*n) &#x3D; O(n2)。</p><p>我刚刚讲了三种复杂度的分析技巧。不过，你并不用刻意去记忆。实际上，复杂度分析这个东西关键在于“熟练”。你只要多看案例，多分析，就能做到“无招胜有招”。</p><h2 id="几种常见时间复杂度实例分析c"><a href="#几种常见时间复杂度实例分析c" class="headerlink" title="几种常见时间复杂度实例分析c"></a>几种常见时间复杂度实例分析c</h2><p>虽然代码千差万别，但是常见的复杂度量级并不多。我稍微总结了一下，这些复杂度量级几乎涵盖了你今后可以接触的所有代码的复杂度量级。</p><p><img src="https://img-blog.csdnimg.cn/20200725175920367.png#pic_center" alt="在这里插入图片描述"></p><p>对于刚罗列的复杂度量级，我们可以粗略地分为两类，多项式量级和非多项式量级。其中，非多项式量级只有两个：O(2n) 和 O(n!)。</p><p>我们把时间复杂度为非多项式量级的算法问题叫作 NP（Non-Deterministic Polynomial，非确定多项式）问题。</p><p>当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。因此，关于 NP 时间复杂度我就不展开讲了。我们主要来看几种常见的多项式时间复杂度。</p><h3 id="1-O-1"><a href="#1-O-1" class="headerlink" title="1.O(1)"></a>1.O(1)</h3><p>首先你必须明确一个概念，O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有 3 行，它的时间复杂度也是 O(1），而不是 O(3)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">6</span>;</span><br><span class="line"><span class="type">int</span> sum = i + j;</span><br></pre></td></tr></table></figure><p>我稍微总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，<strong>一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。</strong></p><h3 id="2-O-logn-、O-nlogn"><a href="#2-O-logn-、O-nlogn" class="headerlink" title="2. O(logn)、O(nlogn)"></a>2. O(logn)、O(nlogn)</h3><p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。我通过一个例子来说明一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</span><br><span class="line">  i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据我们前面讲的复杂度分析方法c，第三行代码是循环执行次数最多的。所以，我们只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。</p><p>从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的：</p><p><img src="https://img-blog.csdnimg.cn/20200725180007712.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>所以，我们只要知道 x 值是多c少，就知道这行代码执行的次数了。通过 2x&#x3D;n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。x&#x3D;log2n，所以，这段代码的时间复杂度就是 O(log2n)。</p><p>现在，我把代码稍微改下，你再看看，这段代码的时间复杂度是多少？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</span><br><span class="line">  i = i * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据我刚刚讲的思路，很简单就能看出来，这段代码的时间复杂度为 O(log3n)。</p><p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p><p>我们知道，对数之间是可以互相转换的，log3n 就等于 log32 * log2n，所以 O(log3n) &#x3D; O(C * log2n)，其中 C&#x3D;log32 是一个常量。基于我们前面的一个理论：<strong>在采用大 O 标记复杂度的时候，可以忽略系数</strong>，即 O(Cf(n)) &#x3D; O(f(n))。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p><p>如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p><h3 id="3-O-m-n-、O-m-n"><a href="#3-O-m-n-、O-m-n" class="headerlink" title="3. O(m+n)、O(m*n)"></a>3. O(m+n)、O(m*n)</h3><p>我们再来讲一种跟前面都不一样的时间复杂度，代码的复杂度<strong>由两个数据</strong>的规模来决定。老规矩，先看代码！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="type">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; m; ++i) &#123;</span><br><span class="line">    sum_1 = sum_1 + i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; j &lt; n; ++j) &#123;</span><br><span class="line">    sum_2 = sum_2 + j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum_1 + sum_2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。</p><p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) &#x3D; O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) &#x3D; O(f(m) * f(n))。</p><h2 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h2><p>前面，咱们花了很长时间讲大 O 表示法和时间复杂度分析，理解了前面讲的内容，空间复杂度分析方法学起来就非常简单了。</p><p>前面我讲过，时间复杂度的全称是<strong>渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表<strong>示算法的存储空间与数据规模之间的增长关系。</strong></p><p>我还是拿具体的例子来给你说明。（这段代码有点“傻”，一般没人会这么写，我这么写只是为了方便给你解释。）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span>[] a = new <span class="type">int</span>[n];</span><br><span class="line">  <span class="keyword">for</span> (i; i &lt;n; ++i) &#123;</span><br><span class="line">    a[i] = i * i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    print out a[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p><p>我们常见的空间复杂度就是 O(1)、O(n)、O(n2)，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p><h2 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h2><p>基础复杂度分析的知识到此就讲完了，我们来总结一下。</p><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2)。等你学完整个专栏之后，你就会发现几乎所有的数据结构和算法的复杂度都跑不出这几个。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-yHFCS8Qw-1595671071335)(D:%5CMyHexoBlogs%5CMD%E8%8D%89%E7%A8%BF%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%5Cimg%5C3%204.jpg)]</p><p><strong>复杂度分析并不难，关键在于多练</strong>。 之后讲后面的内容时，我还会带你详细地分析每一种数据结构和算法的时间、空间复杂度。只要跟着我的思路学习、练习，你很快就能和我一样，每次看到代码的时候，简单的一眼就能看出其复杂度，难的稍微分析一下就能得出答案。</p><h2 id="课后思考"><a href="#课后思考" class="headerlink" title="课后思考"></a>课后思考</h2><p>间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2)。等你学完整个专栏之后，你就会发现几乎所有的数据结构和算法的复杂度都跑不出这几个。</p><p>[外链图片转存中…(img-yHFCS8Qw-1595671071335)]</p><p><strong>复杂度分析并不难，关键在于多练</strong>。 之后讲后面的内容时，我还会带你详细地分析每一种数据结构和算法的时间、空间复杂度。只要跟着我的思路学习、练习，你很快就能和我一样，每次看到代码的时候，简单的一眼就能看出其复杂度，难的稍微分析一下就能得出答案。</p><h2 id="课后思考-1"><a href="#课后思考-1" class="headerlink" title="课后思考"></a>课后思考</h2><p>有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？</p><p>我是<strong>禅墨</strong>，欢迎关注<strong>微信公众号</strong>：</p><blockquote><p>这里是引用<br><img src="https://img-blog.csdnimg.cn/20200725180147220.gif#pic_center" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="https://chanmoyun.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构与算法" scheme="https://chanmoyun.gitee.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://chanmoyun.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-PCA特征脸(大BOSS)</title>
    <link href="https://chanmoyun.gitee.io/2020/07/24/Opencv-pro/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB-PCA%E7%89%B9%E5%BE%81%E8%84%B8(%E5%A4%A7BOSS)/"/>
    <id>https://chanmoyun.gitee.io/2020/07/24/Opencv-pro/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB-PCA%E7%89%B9%E5%BE%81%E8%84%B8(%E5%A4%A7BOSS)/</id>
    <published>2020-07-23T16:00:00.000Z</published>
    <updated>2024-01-09T03:06:21.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="人脸识别-PCA特征脸-大BOSS"><a href="#人脸识别-PCA特征脸-大BOSS" class="headerlink" title="人脸识别-PCA特征脸(大BOSS)"></a>人脸识别-PCA特征脸(大BOSS)</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是禅墨！好久，不见！</p>    <div id="aplayer-siEJqefU" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1493863802" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>在忙了好久的各科考试之后，我终于闲下来了。</p><p>自从小凯上次输给我K210之后，一心想搞我，想要报仇。</p><p>小凯：阿墨，我给你说啊，我XX不服，给你三个小时，你给我做出来一个人脸识别，识别咱两个班一共57人，正确率不能低于96%，我赌100块钱！！！你得在我的监视下完成！</p><p>禅墨：确定？我怕你后悔！</p><p>小凯：确定！后悔，不存在的！你搞吧！！！小样！</p><p>思考了片刻决定用PCA实现！</p><h2 id="PCA特征脸"><a href="#PCA特征脸" class="headerlink" title="PCA特征脸"></a>PCA特征脸</h2><h3 id="PCA原理"><a href="#PCA原理" class="headerlink" title="PCA原理"></a>PCA原理</h3><p>PCA全名为主成分分析，其主要目的就是寻找一个矩阵，然后把原来的一组带有相关性的矩阵映射到寻找到的那个矩阵中，达到降维的目的。<strong>一般的，如果我们有M个N维向量，想将其变换为由R个N维向量表示的新空间中，那么首先将R个基按行组成矩阵A，然后将向量按列组成矩阵B，那么两矩阵的乘积AB就是变换结果，其中AB的第m列为A中第m列变换后的结果。</strong> 这句话就相当于找到了一个R行N列矩阵，然后乘一个N行M列矩阵，这样就得到了一个R行M列矩阵（其中R&lt;&#x3D;N），达到降维的目的。其中M和N的含义为，M可以代表样本个数，而N代表每个样本的特征个数，所以最终结果就是把原来N个特征变为了R个特征，达到降维目的。 </p><h3 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h3><p> 1、构建一个样本集合$S &#x3D;{T_1,T_2,…,T_M}$,$S$ 可以看做是一个N行M列的矩阵，也就是有M个样本，每个样本有N个特征。其中$T_i$是一个向量。<br>2、0均值化，为了便于计算方差的时候需要减去均值，所以如果本身样本是零均值的，就方便计算。  </p><p>$m &#x3D; \frac{1}{M}\sum_{i&#x3D;1}^{M}T_i$ ,这个是计算均值在python中可以使用  </p><pre><code>m = T.mean(axis = 1)  </code></pre><p>进行计算，其中axis &#x3D; 1代表按行求均值。<br>然后$A &#x3D; T -m$ 这个相当于把每个样本都减去均值，这样之后就相当于做了0均值化。   </p><p>3、计算投影矩阵（就是相当于上面的那个R行M列矩阵）<br>这个投影矩阵其实就是由$A<em>A^T$矩阵的特征向量构成，但是由于大多数情况$A</em>A^T$的维度太大（$A<em>A^T$是N行N列矩阵，如果是一张图片的话N就代表像素点个数，所以是相当大的），所以这个时候就利用数学的小技巧转化为先求$A^T</em>A$的特征向量矩阵V，其中V的每一列是一个特征向量，那么V是一个M行M列的矩阵，然后我们再从V中取出前R个最大特征值对应的特征向量，所以V就变成了M行R列矩阵，然后$C &#x3D; AV$,那么这个C矩阵就是计算出的投影矩阵，C为一个N行R列的矩阵。  </p><p><img src="https://img-blog.csdnimg.cn/20200623172716684.jpg#pic_center" alt="在这里插入图片描述"></p><p>4、把原来样本进行投影  </p><p>第三步我们得到了一个N行R列的矩阵C，其中每一列是一个特征向量，但是我们在讲PCA原理的时候我们需要一个R行N列的矩阵，每一行是一个特征向量，所以我们可以使用$C^T$,所以我们投影后的样本变为$P &#x3D; C^T A$ 其中P就是一个R行M列的矩阵，可以看出已经达到了降维的目的。  </p><h2 id="特征脸的实现"><a href="#特征脸的实现" class="headerlink" title="特征脸的实现"></a>特征脸的实现</h2><p>特征脸就是我们上面求得的C矩阵，所谓的基于特征脸进行的人脸识别，就是先把人脸映射到一个低纬空间，然后再计算映射后的脸之间的距离，把距离最近的两个特征脸归为同一个人的脸。  </p><p>所以特征脸的步骤为：  </p><ol><li>加载训练集中的脸，转为一个M行N列矩阵T </li><li>对T进行均值化  </li><li>找到T的投影矩阵C  </li><li>计算投影后的矩阵P  </li><li>设置简单的UI界面，进行图片选择与识别</li><li>加载一个测试图片，并利用C矩阵也把其投影为test_P  </li><li>计算test_P和P中每个样本的距离，最近的就是结果</li><li>通过结果检索对应的列表，找到并输出人名</li></ol><h2 id="Python程序解析"><a href="#Python程序解析" class="headerlink" title="Python程序解析"></a>Python程序解析</h2><h3 id="createDatabase函数"><a href="#createDatabase函数" class="headerlink" title="createDatabase函数"></a>createDatabase函数</h3><p>创建一个存放所有图片的数据库，具体的步骤看程序注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">createDatabase</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="comment"># 查看路径下所有文件</span></span><br><span class="line">    TrainFiles = os.listdir(path)</span><br><span class="line">    <span class="comment"># 计算有几个文件（图片命名都是以 序号.jpg方式）</span></span><br><span class="line">    Train_Number = <span class="built_in">len</span>(TrainFiles) </span><br><span class="line">    T = []</span><br><span class="line">    <span class="comment"># 把所有图片转为1-D并存入T中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,Train_Number):</span><br><span class="line">        ip = path+<span class="string">&#x27;/&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        image = cv.imread(ip,cv.IMREAD_GRAYSCALE)</span><br><span class="line">        image=cv.resize(image,img_size)</span><br><span class="line">        <span class="comment"># 转为1-D</span></span><br><span class="line">        image = image.reshape(image.size,<span class="number">1</span>)</span><br><span class="line">        T.append(image)        </span><br><span class="line">    T = np.array(T)</span><br><span class="line">    <span class="comment"># 不能直接T.reshape(T.shape[1],T.shape[0]) 这样会打乱顺序，</span></span><br><span class="line">    T = T.reshape(T.shape[<span class="number">0</span>],T.shape[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> np.mat(T).T</span><br></pre></td></tr></table></figure><h3 id="eigenfaceCore函数"><a href="#eigenfaceCore函数" class="headerlink" title="eigenfaceCore函数"></a>eigenfaceCore函数</h3><p>特征脸核心处理函数，对T进行数据处理操作，包括进行均值化，计算特征向量和特征值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eigenfaceCore</span>(<span class="params">T</span>):</span><br><span class="line">    <span class="comment"># 把均值变为0 axis = 1代表对各行求均值</span></span><br><span class="line">    m = T.mean(axis = <span class="number">1</span>)</span><br><span class="line">    A = T-m</span><br><span class="line">    L = (A.T)*(A)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算AT *A的 特征向量和特征值V是特征值，D是特征向量</span></span><br><span class="line">    <span class="comment"># L = np.cov(A,rowvar = 0)</span></span><br><span class="line">    V, D = np.linalg.eig(L)</span><br><span class="line">    L_eig = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(A.shape[<span class="number">1</span>]):</span><br><span class="line">            L_eig.append(D[:,i])</span><br><span class="line">    L_eig = np.mat(np.reshape(np.array(L_eig),(-<span class="number">1</span>,<span class="built_in">len</span>(L_eig))))</span><br><span class="line">    <span class="comment"># 计算 A *AT的特征向量</span></span><br><span class="line">    eigenface = A * L_eig</span><br><span class="line">    <span class="keyword">return</span> eigenface,m,A  </span><br></pre></td></tr></table></figure><h3 id="recognize函数"><a href="#recognize函数" class="headerlink" title="recognize函数"></a>recognize函数</h3><p>识别器函数：找到投影矩阵C,计算投影后的矩阵样本P，加载一个测试图片投影为test-p，然后在总样本P中进行比对，找到与test-p距离最近的样本，即为比对结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">recognize</span>(<span class="params">testImage, eigenface,m,A</span>):</span><br><span class="line">    _,trainNumber = np.shape(eigenface)</span><br><span class="line">    <span class="comment"># 投影到特征脸后的</span></span><br><span class="line">    projectedImage = eigenface.T*(A)</span><br><span class="line">    <span class="comment"># 可解决中文路径不能打开问题(相当于英文路径下imread)</span></span><br><span class="line">    testImageArray = cv.imdecode(np.fromfile(testImage,dtype=np.uint8),cv.IMREAD_GRAYSCALE)</span><br><span class="line">    <span class="comment"># 转为1-D</span></span><br><span class="line">    testImageArray=cv.resize(testImageArray,img_size)</span><br><span class="line">    testImageArray = testImageArray.reshape(testImageArray.size,<span class="number">1</span>)</span><br><span class="line">    testImageArray = np.mat(np.array(testImageArray))</span><br><span class="line">    differenceTestImage = testImageArray - m</span><br><span class="line">    projectedTestImage = eigenface.T*(differenceTestImage)</span><br><span class="line">    distance = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, trainNumber):</span><br><span class="line">        q = projectedImage[:,i]</span><br><span class="line">        temp = np.linalg.norm(projectedTestImage - q)</span><br><span class="line">        distance.append(temp)</span><br><span class="line">  </span><br><span class="line">    minDistance = <span class="built_in">min</span>(distance)</span><br><span class="line">    index = distance.index(minDistance)</span><br><span class="line">    cv.imshow(<span class="string">&quot;recognize result&quot;</span>,cv.imread(<span class="string">&#x27;./TrainDatabase&#x27;</span>+<span class="string">&#x27;/&#x27;</span>+<span class="built_in">str</span>(index+<span class="number">1</span> )+<span class="string">&#x27;.jpg&#x27;</span>,cv.IMREAD_GRAYSCALE))</span><br><span class="line">    cv.waitKey()</span><br><span class="line">    <span class="keyword">return</span> index+<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构建可视化界面"><a href="#构建可视化界面" class="headerlink" title="构建可视化界面"></a>构建可视化界面</h3><p>制作一个简单的UI界面，通过简单的按钮选择需要识别人脸的图片，点击开始识别，输出结果，检索列表输出人名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gui</span>():</span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    root.title(<span class="string">&quot;pca face&quot;</span>)</span><br><span class="line">    <span class="comment">#点击选择图片时调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select</span>():</span><br><span class="line">        filename = tkinter.filedialog.askopenfilename()</span><br><span class="line">        <span class="keyword">if</span> filename != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            s=filename</span><br><span class="line">            <span class="comment"># jpg图片文件名 和 路径。</span></span><br><span class="line">            im=Image.<span class="built_in">open</span>(s)</span><br><span class="line">            tkimg=ImageTk.PhotoImage(im)</span><br><span class="line">            <span class="comment"># 执行此函数之前， Tk() 必须已经实例化。</span></span><br><span class="line">            l.config(image=tkimg)</span><br><span class="line">            btn1.config(command=<span class="keyword">lambda</span> : example(filename))</span><br><span class="line">            btn1.config(text = <span class="string">&quot;开始识别&quot;</span>)</span><br><span class="line">            btn1.pack()</span><br><span class="line">            <span class="comment"># 重新绘制</span></span><br><span class="line">            root.mainloop()</span><br><span class="line">    <span class="comment"># 显示图片的位置</span></span><br><span class="line">    l = tk.Label(root)</span><br><span class="line">    l.pack()</span><br><span class="line">    </span><br><span class="line">    btn = tk.Button(root,text=<span class="string">&quot;选择识别的图片&quot;</span>,command=select)</span><br><span class="line">    btn.pack()</span><br><span class="line">    </span><br><span class="line">    btn1 = tk.Button(root) <span class="comment"># 开始识别按钮，刚开始不显示</span></span><br><span class="line">    root.mainloop()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    gui()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><p>我觉得有必要吐槽一下给的570张图片：jpg , png, jpeg, pmg各种格式各种分辨率应有尽有，真的是搞死我了！(一寸人脸照一般为92*112) 不过还好，只有七八十张，其他的就是正常的jpg格式，怎么办呢，我不可能说一张张进行裁剪，所以 就写个程序，批量裁剪吧。我直接给出核心代码，比较简单，就不废话说明了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (path, dirnames, filenames) <span class="keyword">in</span> os.walk(input_dir):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.jpg&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在处理第 %s 张图片&#x27;</span> % index)</span><br><span class="line">            img_path = path + <span class="string">&#x27;/&#x27;</span> + filename</span><br><span class="line">            <span class="built_in">print</span>(img_path)</span><br><span class="line">            img = cv.imdecode(np.fromfile(img_path,dtype=np.uint8),-<span class="number">1</span>)</span><br><span class="line">            new_img = cv.resize(img, (width, height))</span><br><span class="line">            imwritedir = output_dir + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(<span class="number">499</span>+index) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(imwritedir)</span><br><span class="line">            cv.imwrite(imwritedir, new_img)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            key = cv.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="number">27</span>:</span><br><span class="line">                sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>用过opencv的应该知道，读取中文路径会报错，怎么解决呢，也很简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.imdecode(np.fromfile(img_path,dtype=np.uint8),-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>用这个代替imread 完美！</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>计时结束：2：58：56！</p><p>哈哈哈，小凯又输了，收钱去！</p><p>凭良心说，这一篇博文干货满满。</p><h3 id="简单的总结："><a href="#简单的总结：" class="headerlink" title="简单的总结："></a>简单的总结：</h3><p>1.OpenCV中文路径解决方法</p><p>2.批量进行图片的简单裁剪</p><p>3.解析PCA算法原理</p><p>4.Python程序实现</p><p>欢迎关注：禅墨云</p><blockquote><p>公众号：<img src="https://img-blog.csdnimg.cn/20200623171922831.gif#pic_center" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="OpenCv" scheme="https://chanmoyun.gitee.io/categories/Python/OpenCv/"/>
    
    <category term="实战" scheme="https://chanmoyun.gitee.io/categories/Python/OpenCv/%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>基于OpenCV的人脸及笑脸检测</title>
    <link href="https://chanmoyun.gitee.io/2020/05/31/Opencv-pro/%E5%9F%BA%E4%BA%8EOpenCV%E7%9A%84%E4%BA%BA%E8%84%B8%E5%8F%8A%E7%AC%91%E8%84%B8%E6%A3%80%E6%B5%8B/"/>
    <id>https://chanmoyun.gitee.io/2020/05/31/Opencv-pro/%E5%9F%BA%E4%BA%8EOpenCV%E7%9A%84%E4%BA%BA%E8%84%B8%E5%8F%8A%E7%AC%91%E8%84%B8%E6%A3%80%E6%B5%8B/</id>
    <published>2020-05-30T16:00:00.000Z</published>
    <updated>2024-01-09T03:04:46.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="基于OpenCV的人脸及笑脸检测"><a href="#基于OpenCV的人脸及笑脸检测" class="headerlink" title="基于OpenCV的人脸及笑脸检测"></a>基于OpenCV的人脸及笑脸检测</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是禅墨！</p>    <div id="aplayer-aEKVJGIy" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="407761576" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>好久，没见！要从一个玩笑说起</p><p>今天禅墨和小凯打赌：</p><p>小凯：这儿有一堆（200+）图片，看谁能快速地挑出带有笑脸的图片</p><p>禅墨：就你？说赌约吧</p><p>小凯：你不是惦记K210吗？就它了</p><p>禅墨：成交！给我一点时间。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>首先要快速地分拣出微笑的照片，就是进行人脸检测</li><li>然后在人脸区域对特征进行检测，通过对比嘴型的特征，找出笑脸</li><li>结果预览</li></ol><p><img src="https://img-blog.csdnimg.cn/20200531121507101.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="OpenCV-haar分类器"><a href="#OpenCV-haar分类器" class="headerlink" title="OpenCV haar分类器"></a>OpenCV haar分类器</h2><p>图片处理用什么？当然是OpenCV啊</p><p>既然是检测笑脸，如果通过特征的方式，那就绕不开Hear特征分类器</p><p>Haar-like特征最早是由Papageorgiou等人用于物体检测的数字图像特征，而<em>Viola</em>和<em>Jones</em>在此基础上，使用3种类型4种形式的特征。</p><blockquote><p>  Haar特征分为三类：边缘特征、线性特征、中心特征和对角线特征，组合成特征模板。特征模板内有白色和黑色两种矩形，并定义该模板的特征值为白色矩形像素和减去黑色矩形像素和。Haar特征值反映了图像的灰度变化情况。例如：脸部的一些特征能由矩形特征简单的描述，如：眼睛要比脸颊颜色要深，鼻梁两侧比鼻梁颜色要深，嘴巴比周围颜色要深等。但矩形特征只对一些简单的图形结构，如边缘、线段较敏感，所以只能描述特定走向（水平、垂直、对角）的结构。<br>    这类矩形特征模板由两个或多个全等的黑白矩形相邻组合而成，而矩形特征值是白色矩形的灰度值的和减去黑色矩形的灰度值的和，矩形特征对一些简单的图形结构，如线段、边缘比较敏感。如果把这样的矩形放在一个非人脸区域，那么计算出的特征值应该和人脸特征值不一样，所以这些矩形就是为了把人脸特征量化，以区分人脸和非人脸。</p></blockquote><p>如果自己找人脸训练特征的话，需要花费时间和大量的素材，那今天就采用OpenCV官方给出的训练结果！</p><p><strong>导入检测器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">face_cascade = cv2.CascadeClassifier(<span class="string">&#x27;haarcascades/haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">smile_cascade = cv2.CascadeClassifier(<span class="string">&#x27;haarcascades/haarcascade_smile.xml&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="检测过程"><a href="#检测过程" class="headerlink" title="检测过程"></a>检测过程</h2><p>不管是检测人脸还是检测笑脸，都会用到 <strong>detectMultiScale()</strong> 函数进行标记</p><p>此函数的作用是，在输入图像中检测不同尺寸的对象，返回包含对象的矩形框。</p><ol><li>image——输入图像</li><li>scaleFactor——表示每轮检测图像齿轮减少的比例</li><li>minNeighbors——指明对象要至少被检测到几次才能判定对象确实存在</li><li>minSize——检测对象的最小尺寸</li><li>maxSize——检测对象的最大尺寸</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测脸部</span></span><br><span class="line">faces = face_cascade.detectMultiScale(gray,</span><br><span class="line">                            scaleFactor=<span class="number">1.1</span>,</span><br><span class="line">                            minNeighbors=<span class="number">5</span>,</span><br><span class="line">                            minSize=(<span class="number">30</span>, <span class="number">30</span>),</span><br><span class="line">                            flags=cv2.CASCADE_SCALE_IMAGE)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Detected &#x27;</span>, <span class="built_in">len</span>(faces), <span class="string">&quot; face&quot;</span>)</span><br></pre></td></tr></table></figure><p>在人脸检测之后，需要标记出人脸位置，然后在此位置内进行笑脸的检测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标记位置</span></span><br><span class="line"><span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">    img = cv2.rectangle(img, (x, y), (x + w, y + h), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># cv2.circle(img, (int((x + x + w) / 2), int((y + y + h) / 2)), int(w / 2), (0, 255, 0), 1)</span></span><br><span class="line">    roi_gray = gray[y: y + h, x: x + w]</span><br><span class="line">    roi_color = img[y: y + h, x: x + w]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#笑脸</span></span><br><span class="line">    smile = smile_cascade.detectMultiScale(roi_gray，</span><br><span class="line">                            scaleFactor=<span class="number">1.1</span>,</span><br><span class="line">                            minNeighbors=<span class="number">5</span>,</span><br><span class="line">                            minSize=(<span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    <span class="keyword">for</span> (sx, sy, sw, sh) <span class="keyword">in</span> smile:</span><br><span class="line">        cv2.rectangle(roi_color, (sx, sy), (sx + sw, sy + sh), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>为了更直观的在图片窗口反映结果，在左上角对结果进行标记</p><p>需要用到 <strong>putText()</strong> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">label = <span class="string">&#x27;Result: Detected &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(faces)) +<span class="string">&quot; faces !&quot;</span></span><br><span class="line">cv2.putText(img, label, (<span class="number">10</span>, <span class="number">20</span>),</span><br><span class="line">                        cv2.FONT_HERSHEY_COMPLEX,</span><br><span class="line">                        <span class="number">0.3</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>各参数依次是：图片，添加的文字，左上角坐标，字体，字体大小，颜色，字体粗细</strong>。</p><h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><p><img src="https://img-blog.csdnimg.cn/20200531121539394.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200531121539378.jpg" alt="在这里插入图片描述"></p><h2 id="有些问题"><a href="#有些问题" class="headerlink" title="有些问题"></a>有些问题</h2><p>来看多人的</p><p><img src="https://img-blog.csdnimg.cn/20200531121729588.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200531121808434.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>大家都发现了吧，会圈出一些不是笑脸的地方，特别有意思的是衣服上的达芬奇都能够圈出来，说明还是训练结果还是很好的<br>一方面可能与像素有关，另一方面也可能与训练结果有关，个人猜测是特征种类不够多，特征不太明显</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>为什么会出现这个呢，好吧，完全是我个人问题，为了图省事，detectMultiScale()函数没有写全，现在补上（已更新代码块）</p><p>需要注意的是不同的图片需要调minNeighbors的值<br>如果想要做一个完整的，就仿照上面标记人脸数的方法判断，<br>出人脸的跳出，具体怎么搞就不多说了，<br>目前成功率95%以上<br>贴出正常状态图片</p><p><img src="https://img-blog.csdnimg.cn/20200531183221282.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200531183435183.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>再来看美女</p><p><img src="https://img-blog.csdnimg.cn/20200531183500951.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200531183500953.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDkwNzcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>好了，今天就到这里了，去撸K210了</p><p>关于那些问题，欢迎在评论区交流！</p><blockquote><p><strong>微信公众号</strong>：<em>兴趣路人甲</em><img src="https://img-blog.csdnimg.cn/20200531122434968.gif#pic_center" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="OpenCv" scheme="https://chanmoyun.gitee.io/categories/Python/OpenCv/"/>
    
    <category term="实战" scheme="https://chanmoyun.gitee.io/categories/Python/OpenCv/%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C语言经典例题(26-50)</title>
    <link href="https://chanmoyun.gitee.io/2020/05/21/CProgramming/C%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8%E4%BE%8B%E9%A2%98(26-50)/"/>
    <id>https://chanmoyun.gitee.io/2020/05/21/CProgramming/C%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8%E4%BE%8B%E9%A2%98(26-50)/</id>
    <published>2020-05-20T16:00:00.000Z</published>
    <updated>2024-01-09T03:04:03.605Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C语言经典例题-26-50"><a href="#C语言经典例题-26-50" class="headerlink" title="C语言经典例题(26-50)"></a>C语言经典例题(26-50)</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是禅墨！</p>    <div id="aplayer-WzSSNtNZ" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="436514312" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>本文来自老珍藏！</p><p>前天发了一篇，反响挺不错的！今天继续！</p><h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><p>26.利用递归方法求5!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">fact</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d!=%d\n&quot;</span>,i,fact(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fact</span><span class="params">(<span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">        sum=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sum=j*fact(j<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line"><span class="number">0</span>!=<span class="number">1</span></span><br><span class="line"><span class="number">1</span>!=<span class="number">1</span></span><br><span class="line"><span class="number">2</span>!=<span class="number">2</span></span><br><span class="line"><span class="number">3</span>!=<span class="number">6</span></span><br><span class="line"><span class="number">4</span>!=<span class="number">24</span></span><br><span class="line"><span class="number">5</span>!=<span class="number">120</span></span><br></pre></td></tr></table></figure><p>27.利用递归函数调用方式，将所输入的5个字符，以相反顺序打印出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">5</span>;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">palin</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入5个字符\40:\40&quot;</span>);</span><br><span class="line">    palin(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">palin</span><span class="params">(n)</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> next;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        next=getchar();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;相反顺序输出结果\40:\40&quot;</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next=getchar();</span><br><span class="line">        palin(n<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">请输入<span class="number">5</span>个字符 : abcde</span><br><span class="line">相反顺序输出结果 : edcba</span><br></pre></td></tr></table></figure><p>28.有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">age</span><span class="params">(n)</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) c=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">else</span> c=age(n<span class="number">-1</span>)+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,age(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出结果为：</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><p>29.给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> a,b,c,d,e,x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 5 位数字：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>,&amp;x);</span><br><span class="line">    a=x/<span class="number">10000</span>;        <span class="comment">/*分解出万位*/</span></span><br><span class="line">    b=x%<span class="number">10000</span>/<span class="number">1000</span>;   <span class="comment">/*分解出千位*/</span></span><br><span class="line">    c=x%<span class="number">1000</span>/<span class="number">100</span>;     <span class="comment">/*分解出百位*/</span></span><br><span class="line">    d=x%<span class="number">100</span>/<span class="number">10</span>;       <span class="comment">/*分解出十位*/</span></span><br><span class="line">    e=x%<span class="number">10</span>;           <span class="comment">/*分解出个位*/</span></span><br><span class="line">    <span class="keyword">if</span> (a!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;为 5 位数,逆序为： %ld %ld %ld %ld %ld\n&quot;</span>,e,d,c,b,a);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(b!=<span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;为 4 位数,逆序为： %ld %ld %ld %ld\n&quot;</span>,e,d,c,b);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c!=<span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;为 3 位数,逆序为：%ld %ld %ld\n&quot;</span>,e,d,c);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(d!=<span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;为 2 位数,逆序为： %ld %ld\n&quot;</span>,e,d);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(e!=<span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;为 1 位数,逆序为：%ld\n&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出结果为：</span><br><span class="line"></span><br><span class="line">请输入 <span class="number">5</span> 位数字：<span class="number">12345</span></span><br><span class="line">为 <span class="number">5</span> 位数,逆序为： <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>30.（回文数）一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> ge,shi,qian,wan,x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 5 位数字：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>,&amp;x);</span><br><span class="line">    wan=x/<span class="number">10000</span>;        <span class="comment">/*分解出万位*/</span></span><br><span class="line">    qian=x%<span class="number">10000</span>/<span class="number">1000</span>;  <span class="comment">/*分解出千位*/</span></span><br><span class="line">    shi=x%<span class="number">100</span>/<span class="number">10</span>;       <span class="comment">/*分解出十位*/</span></span><br><span class="line">    ge=x%<span class="number">10</span>;            <span class="comment">/*分解出个位*/</span></span><br><span class="line">    <span class="keyword">if</span> (ge==wan&amp;&amp;shi==qian) &#123; <span class="comment">/*个位等于万位并且十位等于千位*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;这是回文数\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;这不是回文数\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出结果为：</span><br><span class="line"></span><br><span class="line">请输入 <span class="number">5</span> 位数字：<span class="number">12321</span></span><br><span class="line">这是回文数</span><br></pre></td></tr></table></figure><p>31.请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> i,j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入第一个字母:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;i);</span><br><span class="line">    getchar();<span class="comment">//scanf(&quot;%c&quot;,&amp;j);的问题，第二次是读入的一个换行符，而不是输入的字符，因此需要加一个getchar() 吃掉换行符</span></span><br><span class="line">    <span class="keyword">switch</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;monday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;wednesday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;friday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入下一个字母\n&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;j);</span><br><span class="line">            <span class="keyword">if</span> (j==<span class="string">&#x27;u&#x27;</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;tuesday\n&quot;</span>);<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span> (j==<span class="string">&#x27;h&#x27;</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;thursday\n&quot;</span>);<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入下一个字母\n&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;j);</span><br><span class="line">            <span class="keyword">if</span> (j==<span class="string">&#x27;a&#x27;</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;saturday\n&quot;</span>);<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span> (j==<span class="string">&#x27;u&#x27;</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;sunday\n&quot;</span>); <span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出结果为：</span><br><span class="line"></span><br><span class="line">请输入第一个字母:</span><br><span class="line">s</span><br><span class="line">请输入下一个字母</span><br><span class="line">a</span><br><span class="line">saturday</span><br></pre></td></tr></table></figure><p>32.删除一个字符串中的指定字母，如：字符串 “aca”，删除其中的 a 字母。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 删除字符串中指定字母函数</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">deleteCharacters</span><span class="params">(<span class="type">char</span> * str, <span class="type">char</span> * charSet)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> hash [<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == charSet)</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        hash[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(charSet); i++)</span><br><span class="line">        hash[charSet[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> currentIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!hash[str[i]])</span><br><span class="line">            str[currentIndex++] = str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    str[currentIndex] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">2</span>] = <span class="string">&quot;a&quot;</span>;     <span class="comment">// 要删除的字母</span></span><br><span class="line">    <span class="type">char</span> s2[<span class="number">5</span>] = <span class="string">&quot;aca&quot;</span>;  <span class="comment">// 目标字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, deleteCharacters(s2, s));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出结果为：</span><br><span class="line"></span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>33.判断一个数字是否为质数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> prime[MAX];</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">isPrimeNaive</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> limit = (<span class="type">int</span>)<span class="built_in">sqrt</span>((<span class="type">double</span>)n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= limit; i=i+<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">sieve</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    prime[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    prime[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; MAX; i++)</span><br><span class="line">        prime[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> limit = (<span class="type">int</span>)<span class="built_in">sqrt</span>((<span class="type">double</span>)MAX);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= limit; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(prime[i])</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i*i; j &lt;= MAX; j+=i)</span><br><span class="line">                prime[j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">isPrimeSieve</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(prime[n])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    sieve();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">1</span>, isPrime(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">2</span>, isPrime(<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">3</span>, isPrime(<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">4</span>, isPrime(<span class="number">4</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">7</span>, isPrime(<span class="number">7</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">9</span>, isPrime(<span class="number">9</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">13</span>, isPrime(<span class="number">13</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">17</span>, isPrime(<span class="number">17</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">100</span>, isPrime(<span class="number">100</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">23</span>, isPrime(<span class="number">23</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;N=%d %d\n&quot;</span>, <span class="number">1</span>, isPrime(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为(末尾数字 <span class="number">1</span> 表示是质数，<span class="number">0</span> 表示不是质数)：</span><br><span class="line"></span><br><span class="line">N=<span class="number">1</span> <span class="number">0</span></span><br><span class="line">N=<span class="number">2</span> <span class="number">1</span></span><br><span class="line">N=<span class="number">3</span> <span class="number">1</span></span><br><span class="line">N=<span class="number">4</span> <span class="number">0</span></span><br><span class="line">N=<span class="number">7</span> <span class="number">1</span></span><br><span class="line">N=<span class="number">9</span> <span class="number">0</span></span><br><span class="line">N=<span class="number">13</span> <span class="number">1</span></span><br><span class="line">N=<span class="number">17</span> <span class="number">1</span></span><br><span class="line">N=<span class="number">100</span> <span class="number">0</span></span><br><span class="line">N=<span class="number">23</span> <span class="number">1</span></span><br><span class="line">N=<span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>34.练习函数调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello_world</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">three_hellos</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> counter;</span><br><span class="line">    <span class="keyword">for</span> (counter = <span class="number">1</span>; counter &lt;= <span class="number">3</span>; counter++)</span><br><span class="line">        hello_world();<span class="comment">/*调用此函数*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    three_hellos();<span class="comment">/*调用此函数*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出结果为：</span><br><span class="line"></span><br><span class="line">Hello, world!</span><br><span class="line">Hello, world!</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><p>35.字符串反转，如将字符串 “<a href="http://www.runoob.com/">www.runoob.com</a>“ 反转为 “moc.boonur.www”。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>* s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取字符串长度</span></span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* p = s;</span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len++;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换 ...</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= len / <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        c = *(s + i);</span><br><span class="line">        *(s + i) = *(s + len - <span class="number">1</span> - i);</span><br><span class="line">        *(s + len - <span class="number">1</span> - i) = c;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[] = <span class="string">&quot;www.runoob.com&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#x27;%s&#x27; =&gt;\n&quot;</span>, s);</span><br><span class="line">    reverse(s);           <span class="comment">// 反转字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#x27;%s&#x27;\n&quot;</span>, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;www.runoob.com&#x27;</span> =&gt;</span><br><span class="line"><span class="string">&#x27;moc.boonur.www&#x27;</span></span><br></pre></td></tr></table></figure><p>36.求100之内的素数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k,n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k=(<span class="type">int</span>)<span class="built_in">sqrt</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=k;j++)</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">            n++;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">5</span>==<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">11</span> </span><br><span class="line"><span class="number">13</span> <span class="number">17</span> <span class="number">19</span> <span class="number">23</span> <span class="number">29</span> </span><br><span class="line"><span class="number">31</span> <span class="number">37</span> <span class="number">41</span> <span class="number">43</span> <span class="number">47</span> </span><br><span class="line"><span class="number">53</span> <span class="number">59</span> <span class="number">61</span> <span class="number">67</span> <span class="number">71</span> </span><br><span class="line"><span class="number">73</span> <span class="number">79</span> <span class="number">83</span> <span class="number">89</span> <span class="number">97</span> </span><br></pre></td></tr></table></figure><p>37.对10个数进行排序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,a[N],temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 10 个数字：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;N;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[min]&gt;a[j]) min=j;</span><br><span class="line">        <span class="keyword">if</span>(min!=i)</span><br><span class="line">        &#123;</span><br><span class="line">            temp=a[min];</span><br><span class="line">            a[min]=a[i];</span><br><span class="line">            a[i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序结果是:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">请输入 <span class="number">10</span> 个数字：</span><br><span class="line"><span class="number">23</span> <span class="number">2</span> <span class="number">27</span> <span class="number">98</span> <span class="number">234</span> <span class="number">1</span> <span class="number">4</span> <span class="number">90</span> <span class="number">88</span> <span class="number">34</span></span><br><span class="line">排序结果是:</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">23</span> <span class="number">27</span> <span class="number">34</span> <span class="number">88</span> <span class="number">90</span> <span class="number">98</span> <span class="number">234</span> </span><br></pre></td></tr></table></figure><p>38.求一个3*3矩阵对角线元素之和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 3</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,a[N][N],sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入矩阵(3*3)：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        sum+=a[i][i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对角线之和为：%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">请输入矩阵(<span class="number">3</span>*<span class="number">3</span>)：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">对角线之和为：<span class="number">15</span></span><br></pre></td></tr></table></figure><p>39.有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">11</span>]=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">19</span>,<span class="number">28</span>,<span class="number">40</span>,<span class="number">100</span>&#125;;</span><br><span class="line">    <span class="type">int</span> temp1,temp2,number,end,i,j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始数组是:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n插入一个新的数字: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number);</span><br><span class="line">    end=a[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">if</span>(number&gt;end)</span><br><span class="line">        a[<span class="number">10</span>]=number;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;number)</span><br><span class="line">            &#123;</span><br><span class="line">                temp1=a[i];</span><br><span class="line">                a[i]=number;</span><br><span class="line">                <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;<span class="number">11</span>;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp2=a[j];</span><br><span class="line">                    a[j]=temp1;</span><br><span class="line">                    temp1=temp2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">原始数组是:</span><br><span class="line">   <span class="number">1</span>   <span class="number">4</span>   <span class="number">6</span>   <span class="number">9</span>  <span class="number">13</span>  <span class="number">16</span>  <span class="number">19</span>  <span class="number">28</span>  <span class="number">40</span> <span class="number">100</span></span><br><span class="line">插入一个新的数字: <span class="number">10</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">4</span>   <span class="number">6</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">13</span>  <span class="number">16</span>  <span class="number">19</span>  <span class="number">28</span>  <span class="number">40</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p>40.将一个数组逆序输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[N]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i,t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始数组是:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N/<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t=a[i];</span><br><span class="line">        a[i]=a[N<span class="number">-1</span>-i];</span><br><span class="line">        a[N<span class="number">-1</span>-i]=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n排序后的数组:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">原始数组是:</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> </span><br><span class="line">排序后的数组:</span><br><span class="line"><span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure><p>41.学习static定义静态变量的用法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        fun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> static_i=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i=%d\n&quot;</span>,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;static_i=%d\n&quot;</span>,static_i);</span><br><span class="line">    i++;</span><br><span class="line">    static_i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">static_i=<span class="number">0</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">static_i=<span class="number">1</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">static_i=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>42.学习使用auto定义变量的用法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,num;</span><br><span class="line">    num=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num 变量为 %d \n&quot;</span>,num);</span><br><span class="line">        num++;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> <span class="type">int</span> num=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;内置模块 num 变量为 %d \n&quot;</span>,num);</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">num 变量为 <span class="number">2</span> </span><br><span class="line">内置模块 num 变量为 <span class="number">1</span> </span><br><span class="line">num 变量为 <span class="number">3</span> </span><br><span class="line">内置模块 num 变量为 <span class="number">1</span> </span><br><span class="line">num 变量为 <span class="number">4</span> </span><br><span class="line">内置模块 num 变量为 <span class="number">1</span> </span><br></pre></td></tr></table></figure><p>43.学习使用static的另一用法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,num;</span><br><span class="line">    num=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num 变量为 %d \n&quot;</span>,num);</span><br><span class="line">        num++;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">static</span> <span class="type">int</span> num=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;内置模块 num 变量为 %d\n&quot;</span>,num);</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">num 变量为 <span class="number">2</span> </span><br><span class="line">内置模块 num 变量为 <span class="number">1</span></span><br><span class="line">num 变量为 <span class="number">3</span> </span><br><span class="line">内置模块 num 变量为 <span class="number">2</span></span><br><span class="line">num 变量为 <span class="number">4</span> </span><br><span class="line">内置模块 num 变量为 <span class="number">3</span></span><br></pre></td></tr></table></figure><p>44.学习使用external的用法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    a=<span class="number">3</span>;</span><br><span class="line">    c=a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    a=b=<span class="number">4</span>;</span><br><span class="line">    add();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c 的值为 %d\n&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">c 的值为 <span class="number">7</span></span><br></pre></td></tr></table></figure><p>45.学习使用register定义变量的方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">        tmp+=i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;总和为 %d\n&quot;</span>,tmp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">总和为 <span class="number">5050</span></span><br></pre></td></tr></table></figure><p>46.宏#define命令练习。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQ(x) (x)*(x)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> again=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;如果值小于 50 程序将终止。\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(again)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n请输入数字：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;该数字的平方为 %d \n&quot;</span>,SQ(num));</span><br><span class="line">        <span class="keyword">if</span>(num&gt;=<span class="number">50</span>)</span><br><span class="line">            again=TRUE;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            again=FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">如果值小于 <span class="number">50</span> 程序将终止。</span><br><span class="line"></span><br><span class="line">请输入数字：<span class="number">100</span></span><br><span class="line">该数字的平方为 <span class="number">10000</span> </span><br><span class="line"></span><br><span class="line">请输入数字：<span class="number">5</span></span><br><span class="line">该数字的平方为 <span class="number">25</span> </span><br></pre></td></tr></table></figure><p>47.宏#define命令练习2。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> exchange(a,b) &#123; int t;t=a;a=b;b=t;&#125;<span class="comment">//注意放在一行里</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> y=<span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x=%d; y=%d\n&quot;</span>,x,y);</span><br><span class="line">    exchange(x,y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x=%d; y=%d\n&quot;</span>,x,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">x=<span class="number">10</span>; y=<span class="number">20</span></span><br><span class="line">x=<span class="number">20</span>; y=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>48.宏#define命令练习3。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LAG &gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SMA &lt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EQ ==</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个数字：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;i,&amp;j);</span><br><span class="line">    <span class="keyword">if</span>(i LAG j)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d 大于 %d \n&quot;</span>,i,j);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i EQ j)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d 等于 %d \n&quot;</span>,i,j);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i SMA j)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d 小于 %d \n&quot;</span>,i,j);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有值。\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">请输入两个数字：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> 小于 <span class="number">2</span> </span><br></pre></td></tr></table></figure><p>49.#if #ifdef和#ifndef的综合应用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXIMUM(x,y)(x&gt;y)?x:y</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MINIMUM(x,y) (x&gt;y)?y:x</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MAX</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更大的数字是 %d\n&quot;</span>,MAXIMUM(a,b));</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更小的数字是 %d\n&quot;</span>,MINIMUM(a,b));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MIN</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更小的数字是 %d\n&quot;</span>,MINIMUM(a,b));</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更大的数字是 %d\n&quot;</span>,MAXIMUM(a,b));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> MAX</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MAX</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更大的数字是 %d\n&quot;</span>,MAXIMUM(a,b));</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更小的数字是 %d\n&quot;</span>,MINIMUM(a,b));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MIN</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更小的数字是 %d\n&quot;</span>,MINIMUM(a,b));</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更大的数字是 %d\n&quot;</span>,MAXIMUM(a,b));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">更大的数字是 <span class="number">20</span></span><br><span class="line">更小的数字是 <span class="number">10</span></span><br><span class="line">更小的数字是 <span class="number">10</span></span><br><span class="line">更大的数字是 <span class="number">20</span></span><br></pre></td></tr></table></figure><p>50.#include 的应用练习</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">if</span>(i LAG j)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d 大于 %d \n&quot;</span>,i,j);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i EQ j)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d 等于 %d \n&quot;</span>,i,j);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i SMA j)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d 小于 %d \n&quot;</span>,i,j);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有值。\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以上实例输出结果为：</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> 小于 <span class="number">20</span> </span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>好了，今天就先分享到这里了。</p><p>喜欢的关注，点个赞！</p><p>微信公众号：<strong>兴趣路人甲</strong></p><blockquote><p><img src="https://img-blog.csdnimg.cn/20200513234341292.gif#pic_center" alt="这里是引用"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C语言" scheme="https://chanmoyun.gitee.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C" scheme="https://chanmoyun.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言经典例题(1-25)</title>
    <link href="https://chanmoyun.gitee.io/2020/05/20/CProgramming/C%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8%E4%BE%8B%E9%A2%98(1-25)/"/>
    <id>https://chanmoyun.gitee.io/2020/05/20/CProgramming/C%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8%E4%BE%8B%E9%A2%98(1-25)/</id>
    <published>2020-05-19T16:00:00.000Z</published>
    <updated>2024-01-09T03:03:52.324Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C语言经典例题-1-25"><a href="#C语言经典例题-1-25" class="headerlink" title="C语言经典例题(1-25)"></a>C语言经典例题(1-25)</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是禅墨！</p>    <div id="aplayer-IUxAGBlx" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1407551413" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>拖欠了很久很久的东西，如果不是有人私聊我，估计就彻底没了。</p><h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><p>1.有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++) &#123; <span class="comment">// 以下为三重循环</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;<span class="number">5</span>;j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;<span class="number">5</span>;k++) &#123; <span class="comment">// 确保i、j、k三位互不相同</span></span><br><span class="line">                <span class="keyword">if</span> (i!=k&amp;&amp;i!=j&amp;&amp;j!=k) &#123; </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d\n&quot;</span>,i,j,k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span> <span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span> <span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span> <span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span> <span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span> </span><br><span class="line"><span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span> <span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span> <span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span> <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span> <span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span> </span><br><span class="line"><span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span> <span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span> <span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span> <span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span> <span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span> <span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span> </span><br><span class="line"><span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span> <span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span> <span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span> <span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span> <span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span> <span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure><p>2.企业发放的奖金根据利润提成。</p><ul><li>利润(I)低于或等于10万元时，奖金可提10%；</li><li>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；</li><li>20万到40万之间时，高于20万元的部分，可提成5%；</li><li>40万到60万之间时高于40万元的部分，可提成3%；</li><li>60万到100万之间时，高于60万元的部分，可提成1.5%；</li><li>高于100万元时，超过100万元的部分按1%提成。</li></ul><p>从键盘输入当月利润I，求应发放奖金总数？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> i;</span><br><span class="line">    <span class="type">double</span> bonus1,bonus2,bonus4,bonus6,bonus10,bonus;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你的净利润是：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;i);</span><br><span class="line">    bonus1=<span class="number">100000</span>*<span class="number">0.1</span>;</span><br><span class="line">    bonus2=bonus1+<span class="number">100000</span>*<span class="number">0.075</span>;</span><br><span class="line">    bonus4=bonus2+<span class="number">200000</span>*<span class="number">0.05</span>;</span><br><span class="line">    bonus6=bonus4+<span class="number">200000</span>*<span class="number">0.03</span>;</span><br><span class="line">    bonus10=bonus6+<span class="number">400000</span>*<span class="number">0.015</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=<span class="number">100000</span>) &#123;</span><br><span class="line">        bonus=i*<span class="number">0.1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;=<span class="number">200000</span>) &#123;</span><br><span class="line">        bonus=bonus1+(i<span class="number">-100000</span>)*<span class="number">0.075</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;=<span class="number">400000</span>) &#123;</span><br><span class="line">        bonus=bonus2+(i<span class="number">-200000</span>)*<span class="number">0.05</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;=<span class="number">600000</span>) &#123;</span><br><span class="line">        bonus=bonus4+(i<span class="number">-400000</span>)*<span class="number">0.03</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;=<span class="number">1000000</span>) &#123;</span><br><span class="line">        bonus=bonus6+(i<span class="number">-600000</span>)*<span class="number">0.015</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">1000000</span>) &#123;</span><br><span class="line">        bonus=bonus10+(i<span class="number">-1000000</span>)*<span class="number">0.01</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;提成为：bonus=%lf&quot;</span>,bonus);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">你的净利润是：</span><br><span class="line"><span class="number">120000</span></span><br><span class="line">提成为：bonus=<span class="number">11500.000000</span></span><br></pre></td></tr></table></figure><p>3.一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>  i, j, m, n, x;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">168</span> / <span class="number">2</span> + <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">168</span> % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            j = <span class="number">168</span> / i;</span><br><span class="line">            <span class="keyword">if</span> ( i &gt; j &amp;&amp; (i + j) % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; (i - j) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m = (i + j) / <span class="number">2</span>;</span><br><span class="line">                n = (i - j) / <span class="number">2</span>;</span><br><span class="line">                x = n * n - <span class="number">100</span>;</span><br><span class="line">                <span class="built_in">printf</span> (<span class="string">&quot;%d + 100 = %d * %d\n&quot;</span>, x, n, n);</span><br><span class="line">                <span class="built_in">printf</span> (<span class="string">&quot;%d + 268 = %d * %d\n&quot;</span>, x, m, m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line"><span class="number">-99</span> + <span class="number">100</span> = <span class="number">1</span> * <span class="number">1</span></span><br><span class="line"><span class="number">-99</span> + <span class="number">268</span> = <span class="number">13</span> * <span class="number">13</span></span><br><span class="line"><span class="number">21</span> + <span class="number">100</span> = <span class="number">11</span> * <span class="number">11</span></span><br><span class="line"><span class="number">21</span> + <span class="number">268</span> = <span class="number">17</span> * <span class="number">17</span></span><br><span class="line"><span class="number">261</span> + <span class="number">100</span> = <span class="number">19</span> * <span class="number">19</span></span><br><span class="line"><span class="number">261</span> + <span class="number">268</span> = <span class="number">23</span> * <span class="number">23</span></span><br><span class="line"><span class="number">1581</span> + <span class="number">100</span> = <span class="number">41</span> * <span class="number">41</span></span><br><span class="line"><span class="number">1581</span> + <span class="number">268</span> = <span class="number">43</span> * <span class="number">43</span></span><br></pre></td></tr></table></figure><p>4.输入某年某月某日，判断这一天是这一年的第几天？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> day,month,year,sum,leap;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入年、月、日，格式为：年,月,日（2015,12,10）\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,&amp;year,&amp;month,&amp;day);  <span class="comment">// 格式为：2015,12,10</span></span><br><span class="line">    <span class="keyword">switch</span>(month) <span class="comment">// 先计算某月以前月份的总天数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:sum=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:sum=<span class="number">31</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:sum=<span class="number">59</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:sum=<span class="number">90</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:sum=<span class="number">120</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:sum=<span class="number">151</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:sum=<span class="number">181</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:sum=<span class="number">212</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:sum=<span class="number">243</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:sum=<span class="number">273</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:sum=<span class="number">304</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:sum=<span class="number">334</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;data error&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum=sum+day; <span class="comment">// 再加上某天的天数</span></span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span>||(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)) &#123;<span class="comment">// 判断是不是闰年</span></span><br><span class="line">        leap=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       leap=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(leap==<span class="number">1</span>&amp;&amp;month&gt;<span class="number">2</span>) &#123; <span class="comment">// *如果是闰年且月份大于2,总天数应该加一天</span></span><br><span class="line">        sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这是这一年的第 %d 天。&quot;</span>,sum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">请输入年、月、日，格式为：年,月,日（<span class="number">2015</span>,<span class="number">12</span>,<span class="number">10</span>）</span><br><span class="line"><span class="number">2015</span>,<span class="number">10</span>,<span class="number">1</span></span><br><span class="line">这是这一年的第 <span class="number">274</span> 天。</span><br></pre></td></tr></table></figure><p>5.输入三个整数x,y,z，请把这三个数由小到大输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y,z,t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入三个数字:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">    <span class="keyword">if</span> (x&gt;y) &#123; <span class="comment">/*交换x,y的值*/</span></span><br><span class="line">        t=x;x=y;y=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;z) &#123; <span class="comment">/*交换x,z的值*/</span></span><br><span class="line">        t=z;z=x;x=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y&gt;z) &#123; <span class="comment">/*交换z,y的值*/</span></span><br><span class="line">        t=y;y=z;z=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从小到大排序: %d %d %d\n&quot;</span>,x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">请输入三个数字:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">从小到大排序: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>6.用*号输出字母C的图案。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;用 * 号输出字母 C!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; ****\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; * \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; ****\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">用 * 号输出字母 C!</span><br><span class="line"> ****</span><br><span class="line"> *</span><br><span class="line"> * </span><br><span class="line"> ****</span><br></pre></td></tr></table></figure><p>7.输出特殊图案X，请在c环境中运行，看一看，Very Beautiful!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a=<span class="number">176</span>,b=<span class="number">219</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>,b,a,a,a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>,a,b,a,b,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>,a,a,b,a,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>,a,b,a,b,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>,b,a,a,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.输出9*9口诀。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,result;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            result=i*j;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%-3d&quot;</span>,i,j,result); <span class="comment">/*-3d表示左对齐，占3位*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">/*每一行后换行*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.要求输出国际象棋棋盘。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>((i+j)%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,<span class="number">219</span>,<span class="number">219</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10.打印楼梯，同时在楼梯上方打印两个笑脸。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\1\1\n&quot;</span>); <span class="comment">/*输出两个笑脸*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,<span class="number">219</span>,<span class="number">219</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11.古典问题（兔子生崽）：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？（输出前40个月即可）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> f1=<span class="number">1</span>,f2=<span class="number">1</span>,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%12d%12d&quot;</span>,f1,f2);</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        f1=f1+f2;</span><br><span class="line">        f2=f1+f2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12.判断101到200之间的素数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">101</span>; i&lt;=<span class="number">200</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">2</span>; j&lt;i; j++) </span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// 如果j能被i整除在跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (i%j==<span class="number">0</span>) </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 判断循环是否提前跳出，如果j&lt;i说明在2~j之间,i有可整除的数</span></span><br><span class="line">        <span class="keyword">if</span> (j&gt;=i) </span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        <span class="comment">// 换行，用count计数，每五个数换行</span></span><br><span class="line">            <span class="keyword">if</span> (count % <span class="number">5</span> == <span class="number">0</span>) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13.打印出所有的”水仙花数”，所谓”水仙花数”是指一个三位数，其各位数字立方和等于该数 本身。例如：153是一个”水仙花数”，因为153&#x3D;1的三次方＋5的三次方＋3的三次方。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=i%<span class="number">10</span>;</span><br><span class="line">        y=i/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">        z=i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i==(x*x*x+y*y*y+z*z*z))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14.利用条件运算符的嵌套来完成此题：学习成绩&gt;&#x3D;90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="type">char</span> grade;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入分数： &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;score);</span><br><span class="line">    grade=(score&gt;=<span class="number">90</span>)?<span class="string">&#x27;A&#x27;</span>:((score&gt;=<span class="number">60</span>)?<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,grade);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15.输入两个正整数m和n，求其最大公约数和最小公倍数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,t,r,n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个数字：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">    &#123;t=b;b=a;a=t;&#125;</span><br><span class="line">    r=a%b;</span><br><span class="line">    n=a*b;</span><br><span class="line">    <span class="keyword">while</span>(r!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a=b;</span><br><span class="line">        b=r;</span><br><span class="line">        r=a%b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这两个数的最大公约数是%d，最小公倍数是%d\n&quot;</span>,b,n/b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>16.将一个正整数分解质因数。例如：输入90,打印出90&#x3D;2<em>3</em>3*5。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入整数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d=&quot;</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(n%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            n/=i;</span><br><span class="line">            <span class="keyword">if</span>(n!=<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>17.输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> letters=<span class="number">0</span>,spaces=<span class="number">0</span>,digits=<span class="number">0</span>,others=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一些字母：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((c&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;z&#x27;</span>)||(c&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            letters++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            digits++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            spaces++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            others++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字母=%d,数字=%d,空格=%d,其他=%d\n&quot;</span>,letters,digits,spaces,others);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>18.求s&#x3D;a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>,a,n,t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 a 和 n：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;n);</span><br><span class="line">    t=a;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s+=t;</span><br><span class="line">        a=a*<span class="number">10</span>;</span><br><span class="line">        t+=a;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a+aa+...=%d\n&quot;</span>,s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>19.一个数如果恰好等于它的因子之和，这个数就称为”完数”。例如6&#x3D;1＋2＋3.编程找出1000以内的所有完数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k,n,sum;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=(i/<span class="number">2</span>);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=j;</span><br><span class="line">                a[++k]=j;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==sum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d=%d&quot;</span>,i,a[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span>(n=<span class="number">1</span>;n&lt;=k;n++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;+%d&quot;</span>,a[n]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>20.一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> h,s;</span><br><span class="line">    h=s=<span class="number">100</span>;</span><br><span class="line">    h=h/<span class="number">2</span>; <span class="comment">//第一次反弹高度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=s+<span class="number">2</span>*h;</span><br><span class="line">        h=h/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第10次落地时，共经过%f米，第10次反弹高%f米\n&quot;</span>,s,h);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>21.猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个<br>第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下<br>的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> day, x1 = <span class="number">0</span>, x2;</span><br><span class="line">    day=<span class="number">9</span>;</span><br><span class="line">    x2=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(day&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        x1=(x2+<span class="number">1</span>)*<span class="number">2</span>;  <span class="comment">// 第一天的桃子数是第2天桃子数加1后的2倍</span></span><br><span class="line">        x2=x1;</span><br><span class="line">        day--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;总数为 %d\n&quot;</span>,x1);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>22.两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="string">&#x27;x&#x27;</span>;i&lt;=<span class="string">&#x27;z&#x27;</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="string">&#x27;x&#x27;</span>;j&lt;=<span class="string">&#x27;z&#x27;</span>;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=j) &#123;</span><br><span class="line">                <span class="keyword">for</span>(k=<span class="string">&#x27;x&#x27;</span>;k&lt;=<span class="string">&#x27;z&#x27;</span>;k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i!=k&amp;&amp;j!=k) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i!=<span class="string">&#x27;x&#x27;</span>&amp;&amp;k!=<span class="string">&#x27;x&#x27;</span>&amp;&amp;k!=<span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;顺序为：a--%c\tb--%c\tc--%c\n&quot;</span>,i,j,k);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>23.打印出如下图案（菱形）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">2</span>-i;j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=<span class="number">2</span>*i;k++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=<span class="number">4</span><span class="number">-2</span>*i;k++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>24.有一分数序列：2&#x2F;1，3&#x2F;2，5&#x2F;3，8&#x2F;5，13&#x2F;8，21&#x2F;13…求出这个数列的前20项之和。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,t;</span><br><span class="line">    <span class="type">float</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> a=<span class="number">2</span>,b=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=sum+a/b;</span><br><span class="line">        t=a;</span><br><span class="line">        a=a+b;</span><br><span class="line">        b=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%9.6f\n&quot;</span>,sum);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>25.求1+2!+3!+…+20!的和。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> sum,mix;</span><br><span class="line">    sum=<span class="number">0</span>,mix=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mix=mix*i;</span><br><span class="line">        sum=sum+mix;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%Lf\n&quot;</span>,sum);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>哈哈哈，今天没有过多文案！</p><p>  printf(“\n”);<br>    }</p><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">24.有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13...求出这个数列的前20项之和。</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i,t;</span><br><span class="line">    float sum=0;</span><br><span class="line">    float a=2,b=1;</span><br><span class="line">    for(i=1;i&lt;=20;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=sum+a/b;</span><br><span class="line">        t=a;</span><br><span class="line">        a=a+b;</span><br><span class="line">        b=t;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%9.6f\n&quot;,sum);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>25.求1+2!+3!+…+20!的和。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> sum,mix;</span><br><span class="line">    sum=<span class="number">0</span>,mix=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mix=mix*i;</span><br><span class="line">        sum=sum+mix;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%Lf\n&quot;</span>,sum);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在后面-1"><a href="#写在后面-1" class="headerlink" title="写在后面"></a>写在后面</h2><p>哈哈哈，今天没有过多文案！</p><p>欢迎关注禅墨云！欢迎评论交流！<br>undefined</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C语言" scheme="https://chanmoyun.gitee.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C" scheme="https://chanmoyun.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>搭建积木：Python 模块化-day11</title>
    <link href="https://chanmoyun.gitee.io/2020/05/19/Python-Learn/11.%E6%90%AD%E5%BB%BA%E7%A7%AF%E6%9C%A8%EF%BC%9APython%20%E6%A8%A1%E5%9D%97%E5%8C%96-day11/"/>
    <id>https://chanmoyun.gitee.io/2020/05/19/Python-Learn/11.%E6%90%AD%E5%BB%BA%E7%A7%AF%E6%9C%A8%EF%BC%9APython%20%E6%A8%A1%E5%9D%97%E5%8C%96-day11/</id>
    <published>2020-05-18T16:00:00.000Z</published>
    <updated>2024-01-09T03:02:20.760Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="搭建积木：Python-模块化"><a href="#搭建积木：Python-模块化" class="headerlink" title="搭建积木：Python 模块化"></a>搭建积木：Python 模块化</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是禅墨！</p>    <div id="aplayer-tlODWduR" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1334295185" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>这是基础版块的最后一节。本来计划14讲，在压缩之后成了11讲。到目前为止，你已经掌握了 Python 这一门当代武功的基本招式和套路，走出了新手村，看到了更远的世界，有了和这个世界过过招的冲动。</p><p>于是，你可能开始尝试写一些不那么简单的系统性工程，或者代码量较大的应用程序。这时候，简单的一个 py 文件已经过于臃肿，无法承担一个重量级软件开发的重任。今天的主要目的，就是化繁为简，将功能模块化、文件化，从而可以像搭积木一样，将不同的功能，组件在大型工程中搭建起来。</p><h2 id="简单模块化"><a href="#简单模块化" class="headerlink" title="简单模块化"></a>简单模块化</h2><p>说到最简单的模块化方式，你可以把函数、类、常量拆分到不同的文件，把它们放在同一个文件夹，然后使用 from your_file import function_name, class_name 的方式调用。之后，这些函数和类就可以在文件内直接使用了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># utils.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sum</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># class_utils.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Encoder</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">return</span> s[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decoder</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(<span class="built_in">list</span>(s)))</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> get_sum</span><br><span class="line"><span class="keyword">from</span> class_utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(get_sum(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">encoder = Encoder()</span><br><span class="line">decoder = Decoder()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encoder.encode(<span class="string">&#x27;abcde&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(decoder.decode(<span class="string">&#x27;edcba&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br><span class="line">edcba</span><br><span class="line">abcde</span><br></pre></td></tr></table></figure><p>我们来看这种方式的代码：get_sum() 函数定义在 utils.py，Encoder 和 Decoder 类则在 class_utils.py，我们在 main 函数直接调用 from import ，就可以将我们需要的东西 import 过来。</p><p>非常简单。但是这就足够了吗？当然不，慢慢地，你会发现，所有文件都堆在一个文件夹下也并不是办法。</p><p>于是，我们试着建一些子文件夹：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># utils/utils.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sum</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># utils/class_utils.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Encoder</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">return</span> s[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decoder</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(<span class="built_in">list</span>(s)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># src/sub_main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.class_utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">encoder = Encoder()</span><br><span class="line">decoder = Decoder()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encoder.encode(<span class="string">&#x27;abcde&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(decoder.decode(<span class="string">&#x27;edcba&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"></span><br><span class="line">edcba</span><br><span class="line">abcde</span><br></pre></td></tr></table></figure><p>而这一次，我们的文件结构是下面这样的：</p><blockquote><p>.<br>├── utils<br>│   ├── utils.py<br>│   └── class_utils.py<br>├── src<br>│   └── sub_main.py<br>└── main.py</p></blockquote><p>很容易看出，main.py 调用子目录的模块时，只需要使用 . 代替 &#x2F; 来表示子目录，utils.utils 表示 utils 子文件夹下的 utils.py 模块就行。</p><p>那如果我们想调用上层目录呢？注意，sys.path.append(“..”) 表示将当前程序所在位置向上提了一级，之后就能调用 utils 的模块了。</p><p>同时要注意一点，import 同一个模块只会被执行一次，这样就可以防止重复导入模块出现问题。当然，良好的编程习惯应该杜绝代码多次导入的情况。在 Facebook 的编程规范中，除了一些极其特殊的情况，import 必须位于程序的最前端。</p><p>最后我想再提一下版本区别。你可能在许多教程中看到过这样的要求：我们还需要在模块所在的文件夹新建一个 <strong>init</strong>.py，内容可以为空，也可以用来表述包对外暴露的模块接口。不过，事实上，这是 Python 2 的规范。在 Python 3 规范中，<strong>init</strong>.py 并不是必须的，很多教程里没提过这一点，或者没讲明白，我希望你还是能注意到这个地方。</p><p>整体而言，这就是最简单的模块调用方式了。在我初用 Python 时，这种方式已经足够我完成项目了，毕竟，很多学校项目的文件数只有个位数，每个文件代码也只有几百行，这种组织方式能帮我顺利完成任务。但是在大厂，一个项目组的 workspace 可能有上千个文件，有几十万到几百万行代码。这种调用方式已经完全不够用了，学会新的组织方式迫在眉睫。</p><p>接下来，我们就系统学习下，模块化的科学组织方式。</p><h2 id="项目模块化"><a href="#项目模块化" class="headerlink" title="项目模块化"></a>项目模块化</h2><p>我们先来回顾下相对路径和绝对路径的概念。</p><p>在 Linux 系统中，每个文件都有一个绝对路径，以 &#x2F; 开头，来表示从根目录到叶子节点的路径，例如 &#x2F;home&#x2F;ubuntu&#x2F;Desktop&#x2F;my_project&#x2F;test.py，这种表示方法叫作绝对路径。</p><p>另外，对于任意两个文件，我们都有一条通路可以从一个文件走到另一个文件，例如 &#x2F;home&#x2F;ubuntu&#x2F;Downloads&#x2F;example.json。再如，我们从 test.py 访问到 example.json，需要写成 ‘..&#x2F;..&#x2F;Downloads&#x2F;example.json’，其中 .. 表示上一层目录。这种表示方法，叫作相对路径。</p><p>通常，一个 Python 文件在运行的时候，都会有一个运行时位置，最开始时即为这个文件所在的文件夹。当然，这个运行路径以后可以被改变。运行 sys.path.append(“..”) ，则可以改变当前 Python 解释器的位置。不过，一般而言我并不推荐，固定一个确定路径对大型工程来说是非常必要的。</p><p>理清楚这些概念后，我们就很容易搞懂，项目中如何设置模块的路径。</p><p>首先，你会发现，相对位置是一种很不好的选择。因为代码可能会迁移，相对位置会使得重构既不雅观，也易出错。因此，在大型工程中尽可能使用绝对位置是第一要义。对于一个独立的项目，所有的模块的追寻方式，最好从项目的根目录开始追溯，这叫做相对的绝对路径。</p><p>事实上，在 Facebook 和 Google，整个公司都只有一个代码仓库，全公司的代码都放在这个库里。我刚对此感到很困惑，也很新奇：</p><ul><li>这样做似乎会增大项目管理的复杂度吧？</li><li>是不是也会有不同组代码隐私泄露的风险呢？</li></ul><p>后来查证，我才发现了这种代码仓库独有的几个优点。</p><p>第一个优点，简化依赖管理。整个公司的代码模块，都可以被你写的任何程序所调用，而你写的库和模块也会被其他人调用。调用的方式，都是从代码的根目录开始索引，也就是前面提到过的相对的绝对路径。这样极大地提高了代码的分享共用能力，你不需要重复造轮子，只需要在写之前，去搜一下有没有已经实现好的包或者框架就可以了。</p><p>第二个优点，版本统一。不存在使用了一个新模块，却导致一系列函数崩溃的情况；并且所有的升级都需要通过单元测试才可以继续。</p><p>第三个优点，代码追溯。你可以很容易追溯，一个 API 是从哪里被调用的，它的历史版本是怎样迭代开发，产生变化的。</p><blockquote><p>如果你有兴趣，可以参考这篇论文：<a href="https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltex">https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltex</a></p></blockquote><p>在做项目的时候，虽然你不可能把全世界的代码都放到一个文件夹下，但是类似模块化的思想还是要有的——那就是以项目的根目录作为最基本的目录，所有的模块调用，都要通过根目录一层层向下索引的方式来 import。</p><p>明白了这一点后，这次我们使用 PyCharm 来创建一个项目。这个项目结构如下所示：</p><blockquote><p>.<br>├── proto<br>│   ├── mat.py<br>├── utils<br>│   └── mat_mul.py<br>└── src<br>    └── main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># proto/mat.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Matrix</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.n = <span class="built_in">len</span>(data)</span><br><span class="line">        self.m = <span class="built_in">len</span>(data[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># utils/mat_mul.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> proto.mat <span class="keyword">import</span> Matrix</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_mul</span>(<span class="params">matrix_1: Matrix, matrix_2: Matrix</span>):</span><br><span class="line">    <span class="keyword">assert</span> matrix_1.m == matrix_2.n</span><br><span class="line">    n, m, s = matrix_1.n, matrix_1.m, matrix_2.m</span><br><span class="line">    result = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(s)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(s):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                result[i][k] += matrix_1.data[i][j] * matrix_2.data[j][k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Matrix(result)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># src/main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> proto.mat <span class="keyword">import</span> Matrix</span><br><span class="line"><span class="keyword">from</span> utils.mat_mul <span class="keyword">import</span> mat_mul</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Matrix([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">b = Matrix([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mat_mul(a, b).data)</span><br><span class="line"></span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">19</span>, <span class="number">22</span>], [<span class="number">43</span>, <span class="number">50</span>]]</span><br></pre></td></tr></table></figure><p>这个例子和前面的例子长得很像，但请注意 utils&#x2F;mat_mul.py，你会发现，它 import Matrix 的方式是from proto.mat。这种做法，直接从项目根目录中导入，并依次向下导入模块 mat.py 中的 Matrix，而不是使用 .. 导入上一级文件夹。</p><p>是不是很简单呢？对于接下来的所有项目，你都能直接使用 Pycharm 来构建。把不同模块放在不同子文件夹里，跨模块调用则是从顶层直接索引，一步到位，非常方便。</p><p>我猜，这时你的好奇心来了。你尝试使用命令行进入 src 文件夹，直接输入 Python main.py，报错，找不到 proto。你不甘心，退回到上一级目录，输入Python src&#x2F;main.py，继续报错，找不到 proto。</p><p>Pycharm 用了什么黑魔法呢？</p><p>实际上，Python 解释器在遇到 import 的时候，它会在一个特定的列表中寻找模块。这个特定的列表，可以用下面的方式拿到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import sys  </span><br><span class="line"></span><br><span class="line">print(sys.path)</span><br><span class="line"></span><br><span class="line">########## 输出 ##########</span><br><span class="line"></span><br><span class="line">[&#x27;&#x27;, &#x27;/usr/lib/python36.zip&#x27;, &#x27;/usr/lib/python3.6&#x27;, &#x27;/usr/lib/python3.6/lib-dynload&#x27;, &#x27;/usr/local/lib/python3.6/dist-packages&#x27;, &#x27;/usr/lib/python3/dist-packages&#x27;]</span><br></pre></td></tr></table></figure><p>请注意，它的第一项为空。其实，Pycharm 做的一件事，就是将第一项设置为项目根目录的绝对地址。这样，每次你无论怎么运行 main.py，import 函数在执行的时候，都会去项目根目录中找相应的包。</p><p>你说，你想修改下，使得普通的 Python 运行环境也能做到？这里有两种方法可以做到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.path[0] = &#x27;/home/ubuntu/workspace/your_projects&#x27;</span><br></pre></td></tr></table></figure><p>第一种方法，“大力出奇迹”，我们可以强行修改这个位置，这样，你的 import 接下来肯定就畅通无阻了。但这显然不是最佳解决方案，把绝对路径写到代码里，是我非常不推荐的方式（你可以写到配置文件中，但找配置文件也需要路径寻找，于是就会进入无解的死循环）。</p><p>第二种方法，是修改 PYTHONHOME。这里我稍微提一下 Python 的 Virtual Environment（虚拟运行环境）。Python 可以通过 Virtualenv 工具，非常方便地创建一个全新的 Python 运行环境。</p><p>事实上，我们提倡，对于每一个项目来说，最好要有一个独立的运行环境来保持包和模块的纯净性。更深的内容超出了今天的范围，你可以自己查资料了解。</p><p>回到第二种修改方法上。在一个 Virtual Environment 里，你能找到一个文件叫 activate，在这个文件的末尾，填上下面的内容：</p><blockquote><p>export PYTHONPATH&#x3D;”&#x2F;home&#x2F;ubuntu&#x2F;workspace&#x2F;your_projects”</p></blockquote><p>这样，每次你通过 activate 激活这个运行时环境的时候，它就会自动将项目的根目录添加到搜索路径中去。</p><h2 id="神奇的-if-name-‘main‘"><a href="#神奇的-if-name-‘main‘" class="headerlink" title="神奇的 if name &#x3D;&#x3D; ‘main‘"></a>神奇的 if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘</h2><p>最后一部分，我们再来讲讲 if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘ ，这个我们经常看到的写法。</p><p>Python 是脚本语言，和 C++、Java 最大的不同在于，不需要显式提供 main() 函数入口。如果你有 C++、Java 等语言经验，应该对 main() {} 这样的结构很熟悉吧？</p><p>不过，既然 Python 可以直接写代码，if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘ 这样的写法，除了能让 Python 代码更好看（更像 C++ ）外，还有什么好处吗？</p><p>项目结构如下：</p><blockquote><p>.<br>├── utils.py<br>├── utils_with_main.py<br>├── main.py<br>└── main_2.py</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># utils.py</span><br><span class="line"></span><br><span class="line">def get_sum(a, b):</span><br><span class="line">    return a + b</span><br><span class="line"></span><br><span class="line">print(&#x27;testing&#x27;)</span><br><span class="line">print(&#x27;&#123;&#125; + &#123;&#125; = &#123;&#125;&#x27;.format(1, 2, get_sum(1, 2)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># utils_with_main.py</span><br><span class="line"></span><br><span class="line">def get_sum(a, b):</span><br><span class="line">    return a + b</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;testing&#x27;)</span><br><span class="line">    print(&#x27;&#123;&#125; + &#123;&#125; = &#123;&#125;&#x27;.format(1, 2, get_sum(1, 2)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># main.py</span><br><span class="line"></span><br><span class="line">from utils import get_sum</span><br><span class="line"></span><br><span class="line">print(&#x27;get_sum: &#x27;, get_sum(1, 2))</span><br><span class="line"></span><br><span class="line">########## 输出 ##########</span><br><span class="line"></span><br><span class="line">testing</span><br><span class="line">1 + 2 = 3</span><br><span class="line">get_sum: 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># main_2.py</span><br><span class="line"></span><br><span class="line">from utils_with_main import get_sum</span><br><span class="line"></span><br><span class="line">print(&#x27;get_sum: &#x27;, get_sum(1, 2))</span><br><span class="line"></span><br><span class="line">########## 输出 ##########</span><br><span class="line"></span><br><span class="line">get_sum_2: 3</span><br></pre></td></tr></table></figure><p>看到这个项目结构，你就很清晰了吧。</p><p>import 在导入文件的时候，会自动把所有暴露在外面的代码全都执行一遍。因此，如果你要把一个东西封装成模块，又想让它可以执行的话，你必须将要执行的代码放在 if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘下面。</p><p>为什么呢？其实，<strong>name</strong> 作为 Python 的魔术内置参数，本质上是模块对象的一个属性。我们使用 import 语句时，<strong>name</strong> 就会被赋值为该模块的名字，自然就不等于 __main__了。更深的原理我就不做过多介绍了，你只需要明白这个知识点即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天，我为你讲述了如何使用 Python 来构建模块化和大型工程。这里需要强调几点：</p><ol><li>通过绝对路径和相对路径，我们可以 import 模块；</li><li>在大型工程中模块化非常重要，模块的索引要通过绝对路径来做，而绝对路径从程序的根目录开始；</li><li>记着巧用if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘来避开 import 时执行。</li></ol><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>OK! 我真的是坚持下来了！<br>今天这篇就是本阶段的最后一篇了！<br>我一直在奔跑，希望你也是！<br>微信公众号：<strong>兴趣路人甲</strong></p><blockquote><p><img src="https://img-blog.csdnimg.cn/20200514215419950.gif#pic_center" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="Python进阶" scheme="https://chanmoyun.gitee.io/categories/Python/Python%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
    <category term="Python进阶" scheme="https://chanmoyun.gitee.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>面向对象(下)：如何实现一个搜索引擎-day10</title>
    <link href="https://chanmoyun.gitee.io/2020/05/18/Python-Learn/10.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%8B)%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-day10/"/>
    <id>https://chanmoyun.gitee.io/2020/05/18/Python-Learn/10.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%8B)%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-day10/</id>
    <published>2020-05-17T16:00:00.000Z</published>
    <updated>2024-01-09T03:02:12.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="面向对象-下-：如何实现一个搜索引擎"><a href="#面向对象-下-：如何实现一个搜索引擎" class="headerlink" title="面向对象(下)：如何实现一个搜索引擎"></a>面向对象(下)：如何实现一个搜索引擎</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你好，我是禅墨！</p>    <div id="aplayer-mXrCalBe" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="554241732" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#4997da" data-volume="0.6"    ></div><p>承接上文，今天的主要目的是，模拟敏捷开发过程中的迭代开发流程，巩固面向对象的程序设计思想。</p><p>我们将从最简单最直接的搜索做起，一步步优化，这其中，我不会涉及到过多的超纲算法，但不可避免会介绍一些现代搜索引擎中的基础概念，例如语料（corpus）、倒序索引（inverted index）等。</p><p>如果你对这方面本身有些了解，自然可以轻松理解；即使你之前完全没接触过搜索引擎，也不用过分担心，我会力求简洁清晰，降低学习难度。同时，我希望你把更多的精力放在面向对象的建模思路上。</p><h2 id="“高大上”的搜索引擎"><a href="#“高大上”的搜索引擎" class="headerlink" title="“高大上”的搜索引擎"></a>“高大上”的搜索引擎</h2><p>引擎一词尤如其名，听起来非常酷炫。搜索引擎，则是新世纪初期互联网发展最重要的入口之一，依托搜索引擎，中国和美国分别诞生了百度、谷歌等巨型公司。</p><p>搜索引擎极大地方便了互联网生活，也成为上网必不可少的刚需工具。依托搜索引擎发展起来的互联网广告，则成了硅谷和中国巨头的核心商业模式；而搜索本身，也在持续进步着， Facebook 和微信也一直有意向在自家社交产品架设搜索平台。关于搜索引擎的价值我不必多说了，今天我们主要来看一下搜索引擎的核心构成。</p><p> Google 的入职培训的，有一门课程叫做 The life of a query，内容是讲用户在浏览器中键入一串文字，按下回车后发生了什么。</p><p>今天我也尝试按照这个思路，来简单介绍下。</p><p>我们知道，<strong>一个搜索引擎由搜索器、索引器、检索器和用户接口四个部分组成</strong>。</p><p>搜索器，通俗来讲就是我们常提到的爬虫（scrawler），它能在互联网上大量爬取各类网站的内容，送给索引器。索引器拿到网页和内容后，会对内容进行处理，形成索引（index），存储于内部的数据库等待检索。</p><p>最后的用户接口很好理解，是指网页和 App 前端界面，例如百度和谷歌的搜索页面。用户通过用户接口，向搜索引擎发出询问（query），询问解析后送达检索器；检索器高效检索后，再将结果返回给用户。</p><p>爬虫知识不是我们今天的重点，这里我就不做深入介绍了。我们假设搜索样本存在于本地磁盘上。</p><p>为了方便，我们只提供五个文件的检索，内容我放在了下面这段代码中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 1.txt</span></span><br><span class="line">I have a dream that my four little children will one day live <span class="keyword">in</span> a nation where they will <span class="keyword">not</span> be judged by the color of their skin but by the content of their character. I have a dream today.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.txt</span></span><br><span class="line">I have a dream that one day down <span class="keyword">in</span> Alabama, <span class="keyword">with</span> its vicious racists, . . . one day right there <span class="keyword">in</span> Alabama little black boys <span class="keyword">and</span> black girls will be able to join hands <span class="keyword">with</span> little white boys <span class="keyword">and</span> white girls <span class="keyword">as</span> sisters <span class="keyword">and</span> brothers. I have a dream today.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.txt</span></span><br><span class="line">I have a dream that one day every valley shall be exalted, every hill <span class="keyword">and</span> mountain shall be made low, the rough places will be made plain, <span class="keyword">and</span> the crooked places will be made straight, <span class="keyword">and</span> the glory of the Lord shall be revealed, <span class="keyword">and</span> <span class="built_in">all</span> flesh shall see it together.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.txt</span></span><br><span class="line">This <span class="keyword">is</span> our hope. . . With this faith we will be able to hew out of the mountain of despair a stone of hope. With this faith we will be able to transform the jangling discords of our nation into a beautiful symphony of brotherhood. With this faith we will be able to work together, to pray together, to struggle together, to go to jail together, to stand up <span class="keyword">for</span> freedom together, knowing that we will be free one day. . . .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.txt</span></span><br><span class="line">And when this happens, <span class="keyword">and</span> when we allow freedom ring, when we let it ring <span class="keyword">from</span> every village <span class="keyword">and</span> every hamlet, <span class="keyword">from</span> every state <span class="keyword">and</span> every city, we will be able to speed up that day when <span class="built_in">all</span> of God<span class="string">&#x27;s children, black men and white men, Jews and Gentiles, Protestants and Catholics, will be able to join hands and sing in the words of the old Negro spiritual: &quot;Free at last! Free at last! Thank God Almighty, we are free at last!&quot;</span></span><br></pre></td></tr></table></figure><p>我们先来定义 SearchEngineBase 基类。这里我先给出了具体的代码，你不必着急操作，还是那句话，跟着节奏慢慢学，再难的东西也可以啃得下来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SearchEngineBase</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_corpus</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">            text = fin.read()</span><br><span class="line">        self.process_corpus(file_path, text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_corpus</span>(<span class="params">self, <span class="built_in">id</span>, text</span>):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;process_corpus not implemented.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, query</span>):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;search not implemented.&#x27;</span>)</span><br><span class="line">py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">search_engine</span>):</span><br><span class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> [<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;2.txt&#x27;</span>, <span class="string">&#x27;3.txt&#x27;</span>, <span class="string">&#x27;4.txt&#x27;</span>, <span class="string">&#x27;5.txt&#x27;</span>]:</span><br><span class="line">        search_engine.add_corpus(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        query = <span class="built_in">input</span>()</span><br><span class="line">        results = search_engine.search(query)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;found &#123;&#125; result(s):&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(results)))</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>SearchEngineBase 可以被继承，继承的类分别代表不同的算法引擎。每一个引擎都应该实现 process_corpus() 和 search() 两个函数，对应我们刚刚提到的索引器和检索器。main() 函数提供搜索器和用户接口，于是一个简单的包装界面就有了。</p><p>具体来看这段代码，其中，</p><ul><li>add_corpus() 函数负责读取文件内容，将文件路径作为 ID，连同内容一起送到 process_corpus 中。</li><li>process_corpus 需要对内容进行处理，然后文件路径为 ID ，将处理后的内容存下来。处理后的内容，就叫做索引（index）。</li><li>search 则给定一个询问，处理询问，再通过索引检索，然后返回。</li></ul><p>好，理解这些概念后，接下来，我们实现一个最基本的可以工作的搜索引擎，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleEngine</span>(<span class="title class_ inherited__">SearchEngineBase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleEngine, self).__init__()</span><br><span class="line">        self.__id_to_texts = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_corpus</span>(<span class="params">self, <span class="built_in">id</span>, text</span>):</span><br><span class="line">        self.__id_to_texts[<span class="built_in">id</span>] = text</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, query</span>):</span><br><span class="line">        results = []</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">id</span>, text <span class="keyword">in</span> self.__id_to_texts.items():</span><br><span class="line">            <span class="keyword">if</span> query <span class="keyword">in</span> text:</span><br><span class="line">                results.append(<span class="built_in">id</span>)</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line">search_engine = SimpleEngine()</span><br><span class="line">main(search_engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">simple</span><br><span class="line">found <span class="number">0</span> result(s):</span><br><span class="line">little</span><br><span class="line">found <span class="number">2</span> result(s):</span><br><span class="line"><span class="number">1.</span>txt</span><br><span class="line"><span class="number">2.</span>txt</span><br></pre></td></tr></table></figure><p>你可能很惊讶，只需要短短十来行代码居然就可以了吗？</p><p>没错，正是如此，这段代码我们拆开来看一下：</p><p>SimpleEngine 实现了一个继承 SearchEngineBase 的子类，继承并实现了 process_corpus 和 search 接口，同时，也顺手继承了 add_corpus 函数（当然你想重写也是可行的），因此我们可以在 main() 函数中直接调取。</p><p>在我们新的构造函数中，self.__id_to_texts &#x3D; {} 初始化了自己的私有变量，也就是这个用来存储文件名到文件内容的字典。</p><p>process_corpus() 函数则非常直白地将文件内容插入到字典中。这里注意，ID 需要是唯一的，不然相同 ID 的新内容会覆盖掉旧的内容。</p><p>search 直接枚举字典，从中找到要搜索的字符串。如果能够找到，则将 ID 放到结果列表中，最后返回。</p><p>你看，是不是非常简单呢？这个过程始终贯穿着面向对象的思想，这里我为你梳理成了几个问题，你可以自己思考一下，</p><ul><li>现在你对父类子类的构造函数调用顺序和方法应该更清楚了吧？</li><li>集成的时候，函数是如何重写的？</li><li>基类是如何充当接口作用的（你可以自行删掉子类中的重写函数，抑或是修改一下函数的参数，看一下会报什么错）？</li><li>方法和变量之间又如何衔接起来的呢？</li></ul><p>好的，我们重新回到搜索引擎这个话题。</p><p>相信你也能看得出来，这种实现方式简单，但显然是一种很低效的方式：每次索引后需要占用大量空间，因为索引函数并没有做任何事情；每次检索需要占用大量时间，因为所有索引库的文件都要被重新搜索一遍。如果把语料的信息量视为 n，那么这里的时间复杂度和空间复杂度都应该是 O(n) 级别的。</p><p>而且，还有一个问题：这里的 query 只能是一个词，或者是连起来的几个词。如果你想要搜索多个词，它们又分散在文章的不同位置，我们的简单引擎就无能为力了。</p><p>这时应该怎么优化呢？</p><p>最直接的一个想法，就是把语料分词，看成一个个的词汇，这样就只需要对每篇文章存储它所有词汇的 set 即可。根据齐夫定律（Zipf’s law，<a href="https://en.wikipedia.org/wiki/Zipf%27s_law%EF%BC%89%EF%BC%8C%E5%9C%A8%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AF%AD%E6%96%99%E5%BA%93%E9%87%8C%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E9%A2%91%E7%8E%87%E4%B8%8E%E5%AE%83%E5%9C%A8%E9%A2%91%E7%8E%87%E8%A1%A8%E9%87%8C%E7%9A%84%E6%8E%92%E5%90%8D%E6%88%90%E5%8F%8D%E6%AF%94%EF%BC%8C%E5%91%88%E7%8E%B0%E5%B9%82%E5%BE%8B%E5%88%86%E5%B8%83%E3%80%82%E5%9B%A0%E6%AD%A4%EF%BC%8C%E8%AF%AD%E6%96%99%E5%88%86%E8%AF%8D%E7%9A%84%E5%81%9A%E6%B3%95%E5%8F%AF%E4%BB%A5%E5%A4%A7%E5%A4%A7%E6%8F%90%E5%8D%87%E6%88%91%E4%BB%AC%E7%9A%84%E5%AD%98%E5%82%A8%E5%92%8C%E6%90%9C%E7%B4%A2%E6%95%88%E7%8E%87%E3%80%82">https://en.wikipedia.org/wiki/Zipf%27s_law），在自然语言的语料库里，一个单词出现的频率与它在频率表里的排名成反比，呈现幂律分布。因此，语料分词的做法可以大大提升我们的存储和搜索效率。</a></p><p>那具体该如何实现呢？</p><h2 id="Bag-of-Words-和-Inverted-Index"><a href="#Bag-of-Words-和-Inverted-Index" class="headerlink" title="Bag of Words 和 Inverted Index"></a>Bag of Words 和 Inverted Index</h2><p>我们先来实现一个名叫 Bag of Words 的搜索模型。请看下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BOWEngine</span>(<span class="title class_ inherited__">SearchEngineBase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(BOWEngine, self).__init__()</span><br><span class="line">        self.__id_to_words = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_corpus</span>(<span class="params">self, <span class="built_in">id</span>, text</span>):</span><br><span class="line">        self.__id_to_words[<span class="built_in">id</span>] = self.parse_text_to_words(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, query</span>):</span><br><span class="line">        query_words = self.parse_text_to_words(query)</span><br><span class="line">        results = []</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">id</span>, words <span class="keyword">in</span> self.__id_to_words.items():</span><br><span class="line">            <span class="keyword">if</span> self.query_match(query_words, words):</span><br><span class="line">                results.append(<span class="built_in">id</span>)</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query_match</span>(<span class="params">query_words, words</span>):</span><br><span class="line">        <span class="keyword">for</span> query_word <span class="keyword">in</span> query_words:</span><br><span class="line">            <span class="keyword">if</span> query_word <span class="keyword">not</span> <span class="keyword">in</span> words:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_text_to_words</span>(<span class="params">text</span>):</span><br><span class="line">        <span class="comment"># 使用正则表达式去除标点符号和换行符</span></span><br><span class="line">        text = re.sub(<span class="string">r&#x27;[^\w ]&#x27;</span>, <span class="string">&#x27; &#x27;</span>, text)</span><br><span class="line">        <span class="comment"># 转为小写</span></span><br><span class="line">        text = text.lower()</span><br><span class="line">        <span class="comment"># 生成所有单词的列表</span></span><br><span class="line">        word_list = text.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="comment"># 去除空白单词</span></span><br><span class="line">        word_list = <span class="built_in">filter</span>(<span class="literal">None</span>, word_list)</span><br><span class="line">        <span class="comment"># 返回单词的 set</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">set</span>(word_list)</span><br><span class="line"></span><br><span class="line">search_engine = BOWEngine()</span><br><span class="line">main(search_engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i have a dream</span><br><span class="line">found <span class="number">3</span> result(s):</span><br><span class="line"><span class="number">1.</span>txt</span><br><span class="line"><span class="number">2.</span>txt</span><br><span class="line"><span class="number">3.</span>txt</span><br><span class="line">freedom children</span><br><span class="line">found <span class="number">1</span> result(s):</span><br><span class="line"><span class="number">5.</span>txt</span><br></pre></td></tr></table></figure><p>你应该发现，代码开始变得稍微复杂些了。</p><p>这里我们先来理解一个概念，BOW Model，即 <a href="https://en.wikipedia.org/wiki/Bag-of-words_model">Bag of Words Model</a>，中文叫做词袋模型。这是 NLP 领域最常见最简单的模型之一。</p><p>假设一个文本，不考虑语法、句法、段落，也不考虑词汇出现的顺序，只将这个文本看成这些词汇的集合。于是相应的，我们把 id_to_texts 替换成 id_to_words，这样就只需要存这些单词，而不是全部文章，也不需要考虑顺序。</p><p>其中，process_corpus() 函数调用类静态函数 parse_text_to_words，将文章打碎形成词袋，放入 set 之后再放到字典中。</p><p>search() 函数则稍微复杂一些。这里我们假设，想得到的结果，是所有的搜索关键词都要出现在同一篇文章中。那么，我们需要同样打碎 query 得到一个 set，然后把 set 中的每一个词，和我们的索引中每一篇文章进行核对，看一下要找的词是否在其中。而这个过程由静态函数 query_match 负责。</p><p>你可以回顾一下学到的静态函数，我们看到，这两个函数都是没有状态的，它们不涉及对象的私有变量（没有 self 作为参数），相同的输入能够得到完全相同的输出结果。因此设置为静态，可以方便其他的类来使用。</p><p>可是，即使这样做，每次查询时依然需要遍历所有 ID，虽然比起 Simple 模型已经节约了大量时间，但是互联网上有上亿个页面，每次都全部遍历的代价还是太大了。到这时，又该如何优化呢？</p><p>你可能想到了，我们每次查询的 query 的单词量不会很多，一般也就几个、最多十几个的样子。那可不可以从这里下手呢？</p><p>再有，词袋模型并不考虑单词间的顺序，但有些人希望单词按顺序出现，或者希望搜索的单词在文中离得近一些，这种情况下词袋模型现任就无能为力了。</p><p>针对这两点，我们还能做得更好吗？显然是可以的，请看接下来的这段代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BOWInvertedIndexEngine</span>(<span class="title class_ inherited__">SearchEngineBase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(BOWInvertedIndexEngine, self).__init__()</span><br><span class="line">        self.inverted_index = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_corpus</span>(<span class="params">self, <span class="built_in">id</span>, text</span>):</span><br><span class="line">        words = self.parse_text_to_words(text)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> self.inverted_index:</span><br><span class="line">                self.inverted_index[word] = []</span><br><span class="line">            self.inverted_index[word].append(<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, query</span>):</span><br><span class="line">        query_words = <span class="built_in">list</span>(self.parse_text_to_words(query))</span><br><span class="line">        query_words_index = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> query_word <span class="keyword">in</span> query_words:</span><br><span class="line">            query_words_index.append(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果某一个查询单词的倒序索引为空，我们就立刻返回</span></span><br><span class="line">        <span class="keyword">for</span> query_word <span class="keyword">in</span> query_words:</span><br><span class="line">            <span class="keyword">if</span> query_word <span class="keyword">not</span> <span class="keyword">in</span> self.inverted_index:</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 首先，获得当前状态下所有倒序索引的 index</span></span><br><span class="line">            current_ids = []</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> idx, query_word <span class="keyword">in</span> <span class="built_in">enumerate</span>(query_words):</span><br><span class="line">                current_index = query_words_index[idx]</span><br><span class="line">                current_inverted_list = self.inverted_index[query_word]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 已经遍历到了某一个倒序索引的末尾，结束 search</span></span><br><span class="line">                <span class="keyword">if</span> current_index &gt;= <span class="built_in">len</span>(current_inverted_list):</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">                current_ids.append(current_inverted_list[current_index])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 然后，如果 current_ids 的所有元素都一样，那么表明这个单词在这个元素对应的文档中都出现了</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(x == current_ids[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> current_ids):</span><br><span class="line">                result.append(current_ids[<span class="number">0</span>])</span><br><span class="line">                query_words_index = [x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> query_words_index]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果不是，我们就把最小的元素加一</span></span><br><span class="line">            min_val = <span class="built_in">min</span>(current_ids)</span><br><span class="line">            min_val_pos = current_ids.index(min_val)</span><br><span class="line">            query_words_index[min_val_pos] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_text_to_words</span>(<span class="params">text</span>):</span><br><span class="line">        <span class="comment"># 使用正则表达式去除标点符号和换行符</span></span><br><span class="line">        text = re.sub(<span class="string">r&#x27;[^\w ]&#x27;</span>, <span class="string">&#x27; &#x27;</span>, text)</span><br><span class="line">        <span class="comment"># 转为小写</span></span><br><span class="line">        text = text.lower()</span><br><span class="line">        <span class="comment"># 生成所有单词的列表</span></span><br><span class="line">        word_list = text.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="comment"># 去除空白单词</span></span><br><span class="line">        word_list = <span class="built_in">filter</span>(<span class="literal">None</span>, word_list)</span><br><span class="line">        <span class="comment"># 返回单词的 set</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">set</span>(word_list)</span><br><span class="line"></span><br><span class="line">search_engine = BOWInvertedIndexEngine()</span><br><span class="line">main(search_engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">little</span><br><span class="line">found <span class="number">2</span> result(s):</span><br><span class="line"><span class="number">1.</span>txt</span><br><span class="line"><span class="number">2.</span>txt</span><br><span class="line">little vicious</span><br><span class="line">found <span class="number">1</span> result(s):</span><br><span class="line"><span class="number">2.</span>txt</span><br></pre></td></tr></table></figure><p>首先我要强调一下，<strong>这次的算法并不需要你完全理解</strong>，这里的实现有一些超出了本章知识点。但希望你不要因此退缩，这个例子会告诉你，面向对象编程是如何把算法复杂性隔离开来，而保留接口和其他的代码不变。</p><p>我们接着来看这段代码。你可以看到，新模型继续使用之前的接口，仍然只在 —__init()__、process_corpus()和search()三个函数进行修改。</p><p>这其实也是大公司里团队协作的一种方式，在合理的分层设计后，<strong>每一层的逻辑只需要处理好分内的事情即可</strong>。在迭代升级我们的搜索引擎内核时， main 函数、用户接口没有任何改变。当然，如果公司招了新的前端工程师，要对用户接口部分进行修改，新人也不需要过分担心后台的事情，只要做好数据交互就可以了。</p><p>继续看代码，你可能注意到了开头的 Inverted Index。Inverted Index Model，即倒序索引，是非常有名的搜索引擎方法，接下来我简单介绍一下。</p><p>倒序索引，一如其名，也就是说这次反过来，我们保留的是 word -&gt; id 的字典。于是情况就豁然开朗了，在 search 时，我们只需要把想要的 query_word 的几个倒序索引单独拎出来，然后从这几个列表中找共有的元素，那些共有的元素，即 ID，就是我们想要的查询结果。这样，我们就避免了将所有的 index 过一遍的尴尬。</p><p>process_corpus 建立倒序索引。注意，这里的代码都是非常精简的。在工业界领域，需要一个 unique ID 生成器，来对每一篇文章标记上不同的 ID，倒序索引也应该按照这个 unique_id 来进行排序。</p><p>至于 search() 函数，你大概了解它做的事情即可。它会根据 query_words 拿到所有的倒序索引，如果拿不到，就表示有的 query word 不存在于任何文章中，直接返回空；拿到之后，运行一个“合并 K 个有序数组”的算法，从中拿到我们想要的 ID，并返回</p><blockquote><p>注意，这里用到的算法并不是最优的，最优的写法需要用最小堆来存储 index。这是一道有名的 leetcode hard 题，有兴趣请参考：<a href="https://blog.csdn.net/qqxx6661/article/details/77814794%EF%BC%89">https://blog.csdn.net/qqxx6661/article/details/77814794）</a></p></blockquote><p>遍历的问题解决了，那第二个问题，如果我们想要实现搜索单词按顺序出现，或者希望搜索的单词在文中离得近一些呢？</p><p>我们需要在 Inverted Index 上，对于每篇文章也保留单词的位置信息，这样一来，在合并操作的时候处理一下就可以了。</p><p>倒序索引我就介绍到这里了，如果你感兴趣可以自行查阅资料。还是那句话，我们的重点是面向对象的抽象，别忘了体会这一思想。</p><h2 id="LRU-和多重继承"><a href="#LRU-和多重继承" class="headerlink" title="LRU 和多重继承"></a>LRU 和多重继承</h2><p>到这一步，终于，你的搜索引擎上线了，有了越来越多的访问量（QPS）。欣喜骄傲的同时，你却发现服务器有些“不堪重负”了。经过一段时间的调研，你发现大量重复性搜索占据了 90% 以上的流量，于是，你想到了一个大杀器——给搜索引擎加一个缓存。</p><p>所以，最后这部分，我就来讲讲缓存和多重继承的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pylru</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size=<span class="number">32</span></span>):</span><br><span class="line">        self.cache = pylru.lrucache(size)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> self.cache</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> self.cache[key]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        self.cache[key] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BOWInvertedIndexEngineWithCache</span>(BOWInvertedIndexEngine, LRUCache):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(BOWInvertedIndexEngineWithCache, self).__init__()</span><br><span class="line">        LRUCache.__init__(self)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, query</span>):</span><br><span class="line">        <span class="keyword">if</span> self.has(query):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;cache hit!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get(query)</span><br><span class="line">        </span><br><span class="line">        result = <span class="built_in">super</span>(BOWInvertedIndexEngineWithCache, self).search(query)</span><br><span class="line">        self.<span class="built_in">set</span>(query, result)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">search_engine = BOWInvertedIndexEngineWithCache()</span><br><span class="line">main(search_engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">little</span><br><span class="line">found <span class="number">2</span> result(s):</span><br><span class="line"><span class="number">1.</span>txt</span><br><span class="line"><span class="number">2.</span>txt</span><br><span class="line">little</span><br><span class="line">cache hit!</span><br><span class="line">found <span class="number">2</span> result(s):</span><br><span class="line"><span class="number">1.</span>txt</span><br><span class="line"><span class="number">2.</span>txt</span><br></pre></td></tr></table></figure><p>它的代码很简单，LRUCache 定义了一个缓存类，你可以通过继承这个类来调用其方法。LRU 缓存是一种很经典的缓存（同时，LRU 的实现也是硅谷大厂常考的算法面试题，这里为了简单，我直接使用 pylru 这个包），它符合自然界的局部性原理，可以保留最近使用过的对象，而逐渐淘汰掉很久没有被用过的对象。</p><p>因此，这里的缓存使用起来也很简单，调用 has() 函数判断是否在缓存中，如果在，调用 get 函数直接返回结果；如果不在，送入后台计算结果，然后再塞入缓存。</p><p>我们可以看到，BOWInvertedIndexEngineWithCache 类，多重继承了两个类。首先，你需要注意的是构造函数（上节课的思考题，你思考了吗？）。多重继承有两种初始化方法，我们分别来看一下。</p><p><strong>第一种方法</strong>，用下面这行代码，直接初始化该类的第一个父类：</p><blockquote><p>super(BOWInvertedIndexEngineWithCache, self).<strong>init</strong>()</p></blockquote><p>不过使用这种方法时，要求继承链的最顶层父类必须要继承 object。</p><p><strong>第二种方法</strong>，对于多重继承，如果有多个构造函数需要调用， 我们必须用传统的方法LRUCache.<strong>init</strong>(self) 。</p><p>其次，你应该注意，search() 函数被子类 BOWInvertedIndexEngineWithCache 再次重载，但是我还需要调用 BOWInvertedIndexEngine 的 search() 函数，这时该怎么办呢？请看下面这行代码：</p><blockquote><p>super(BOWInvertedIndexEngineWithCache, self).search(query)</p></blockquote><p>我们可以强行调用被覆盖的父类的函数。</p><p>这样一来，我们就简洁地实现了缓存，而且还是在不影响 BOWInvertedIndexEngine 代码的情况下。这部分内容希望你多读几遍，自己揣摩清楚，通过这个例子多多体会继承的优势。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>本篇文章基于景霄老师的指导与文案</strong></p><p>今天是面向对象的实战应用，相比起前面的理论知识，内容其实不那么友好。不过，若你能静下心来，仔细学习，理清楚整个过程的要点，对你理解面向对象必将有所裨益。比如，你可以根据下面两个问题，来检验今天这节课的收获。</p><ul><li>你能把这节课所有的类的属性和函数抽取出来，自己在纸上画一遍继承关系吗？</li><li>迭代开发流程是怎样的？</li></ul><p>其实于我而言，通过构造搜索引擎这么一个例子来讲、搞面向对象，也是颇费了一番功夫。这其中虽然涉及一些搜索引擎的专业知识和算法，但篇幅有限，也只能算是抛砖引玉，你若有所收获，我便欣然满足。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>继续昨天出了一篇C语言的经典例题，反响挺好的，所以打算接着出，承诺明天一篇。<br>欢迎关注~</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20200512220516447.gif#pic_center" alt="这里是引用"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/categories/Python/"/>
    
    <category term="Python进阶" scheme="https://chanmoyun.gitee.io/categories/Python/Python%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="Python" scheme="https://chanmoyun.gitee.io/tags/Python/"/>
    
    <category term="Python进阶" scheme="https://chanmoyun.gitee.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
</feed>
